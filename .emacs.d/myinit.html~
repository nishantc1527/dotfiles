<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2020-07-23 Thu 12:55 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>&lrm;</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Nikhil Chatterjee" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2019 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org0edfa27">1. org setup</a></li>
<li><a href="#org65a05a7">2. helm</a>
<ul>
<li><a href="#org5403424">2.1. general configuration</a></li>
<li><a href="#orgbb13fce">2.2. helm-c-yasnippet</a></li>
<li><a href="#org4a2508b">2.3. no ideas wuts going on here</a></li>
</ul>
</li>
<li><a href="#org48d0202">3. ggtags</a>
<ul>
<li><a href="#org7f05859">3.1. general configurations</a></li>
<li><a href="#orgd4d9c4b">3.2. interfacing gtags with helm</a></li>
<li><a href="#org16375d4">3.3. enabling everywhere</a></li>
</ul>
</li>
<li><a href="#org8d29ac6">4. yasnippet</a></li>
<li><a href="#org34d05bc">5. rust setup</a></li>
<li><a href="#org0b39edc">6. ibuffer</a></li>
<li><a href="#org8a4059c">7. auto completion</a>
<ul>
<li><a href="#orgeb1cacd">7.1. interface with helm</a></li>
</ul>
</li>
<li><a href="#orgc946c7c">8. web mode</a></li>
<li><a href="#orgb4f188a">9. interface tweaks</a></li>
<li><a href="#org134d931">10. miscellaneous small packages</a>
<ul>
<li><a href="#orge97d0df">10.1. nyan mode</a></li>
<li><a href="#orgcda3f84">10.2. golden ratio mode</a></li>
<li><a href="#orga135455">10.3. smart parentheses (?)</a></li>
<li><a href="#org7115731">10.4. duplicate-thing</a></li>
<li><a href="#org23a50a4">10.5. misc</a></li>
<li><a href="#org2ca68f1">10.6. expand region</a></li>
<li><a href="#org5250b71">10.7. Sudo edit</a></li>
<li><a href="#orgc1cd939">10.8. beacon</a></li>
<li><a href="#org77092dd">10.9. multiple cursors</a></li>
<li><a href="#orga57522e">10.10. which key</a></li>
<li><a href="#org91bedf8">10.11. ansi color</a></li>
</ul>
</li>
<li><a href="#orgf2f5503">11. theme</a></li>
</ul>
</div>
</div>

<div id="outline-container-org0edfa27" class="outline-2">
<h2 id="org0edfa27"><span class="section-number-2">1</span> org setup</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">org-mode</span>
  <span style="color: #BB98FC;">:ensure</span> t
  <span style="color: #BB98FC;">:config</span>
  (<span style="color: #66D9EF;">setq</span> org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-confirm-babel-evaluate nil
        org-edit-src-content-indentation 0)
  (<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">org-bullets</span>
    <span style="color: #BB98FC;">:init</span>
    (add-hook 'org-mode-hook 'org-bullets-mode))
  (<span style="color: #66D9EF;">setq</span> org-ellipsis <span style="color: #C1CAFF;">"&#10549;"</span>)
  (<span style="color: #66D9EF;">setq</span> org-src-fontify-natively t)
  (<span style="color: #66D9EF;">setq</span> org-src-tab-acts-natively t)
  (<span style="color: #66D9EF;">setq</span> org-src-window-setup 'current-window)
  (add-to-list 'org-structure-template-alist
               '(<span style="color: #C1CAFF;">"el"</span> . <span style="color: #C1CAFF;">"src emacs-lisp"</span>))
  (<span style="color: #66D9EF;">setq</span> org-adapt-indentation nil)
  (define-key global-map <span style="color: #C1CAFF;">"\C-cl"</span> 'org-store-link)
  (define-key global-map <span style="color: #C1CAFF;">"\C-ca"</span> 'org-agenda)
  (define-key global-map <span style="color: #C1CAFF;">"\C-cc"</span> 'org-capture)
  (<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">ox-md</span> <span style="color: #BB98FC;">:ensure</span> t)
  (<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">ox-beamer</span> <span style="color: #BB98FC;">:ensure</span> t)
  (<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">htmlize</span> <span style="color: #BB98FC;">:ensure</span> t)
  (<span style="color: #66D9EF;">setq</span> org-latex-pdf-process
        '(<span style="color: #C1CAFF;">"xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"</span>
          <span style="color: #C1CAFF;">"xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"</span>
          <span style="color: #C1CAFF;">"xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"</span>))
  (add-to-list 'org-latex-packages-alist '(<span style="color: #C1CAFF;">""</span> <span style="color: #C1CAFF;">"minted"</span>))
  (<span style="color: #66D9EF;">setq</span> org-latex-listings 'minted)
  (<span style="color: #66D9EF;">setq</span> TeX-parse-self t)
  (<span style="color: #66D9EF;">setq</span> TeX-PDF-mode t)
  (add-hook 'LaTeX-mode-hook
            (<span style="color: #66D9EF;">lambda</span> ()
              (LaTeX-math-mode)
              (<span style="color: #66D9EF;">setq</span> TeX-master t)))
  (<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">orgalist</span>
    <span style="color: #BB98FC;">:config</span>
    (add-hook 'git-commit-mode-hook 'orgalist-mode)
    (add-hook 'markdown-mode-hook 'orgalist-mode)
    (add-hook 'message-mode-hook 'orgalist-mode))
  (add-to-list 'auto-mode-alist '(<span style="color: #C1CAFF;">"\\.org\\'"</span> . org-mode))
  (global-set-key <span style="color: #C1CAFF;">"\C-cl"</span> 'org-store-link)
  (global-set-key <span style="color: #C1CAFF;">"\C-ca"</span> 'org-agenda)

  (add-to-list 'auto-mode-alist '(<span style="color: #C1CAFF;">"\\.org\\'"</span> . org-mode))
  (global-set-key <span style="color: #C1CAFF;">"\C-cl"</span> 'org-store-link)
  (global-set-key <span style="color: #C1CAFF;">"\C-ca"</span> 'org-agenda))
</pre>
</div>
</div>
</div>

<div id="outline-container-org65a05a7" class="outline-2">
<h2 id="org65a05a7"><span class="section-number-2">2</span> helm</h2>
<div class="outline-text-2" id="text-2">
<p>
Used for auto-completion in finding files, and a bunch of other non-coding stuff
</p>
</div>
<div id="outline-container-org5403424" class="outline-3">
<h3 id="org5403424"><span class="section-number-3">2.1</span> general configuration</h3>
<div class="outline-text-3" id="text-2-1">
<p>
The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
Changed to "C-c h". Note: We must set "C-c h" globally, because we
cannot change `helm-command-prefix-key' once `helm-config' is loaded.
rebind tab to run persistent action
make TAB work in terminal
list actions using C-z
open helm buffer inside current window, not occupy whole other window
move to end or beginning of source when reaching top or bottom of source.
search for library in `require' and `declare-function' sexp.
scroll 8 lines other window using M-&lt;next&gt;/M-&lt;prior&gt;
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">helm</span>
  <span style="color: #BB98FC;">:ensure</span> t
  <span style="color: #BB98FC;">:config</span>
  (<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">helm-config</span> <span style="color: #BB98FC;">:ensure</span> t)
  (global-set-key (kbd <span style="color: #C1CAFF;">"C-c h"</span>) 'helm-command-prefix)
  (global-unset-key (kbd <span style="color: #C1CAFF;">"C-x c"</span>))
  (define-key helm-map (kbd <span style="color: #C1CAFF;">"&lt;tab&gt;"</span>) 'helm-execute-persistent-action)
  (define-key helm-map (kbd <span style="color: #C1CAFF;">"C-i"</span>) 'helm-execute-persistent-action)
  (define-key helm-map (kbd <span style="color: #C1CAFF;">"C-z"</span>)  'helm-select-action)

  (global-set-key (kbd <span style="color: #C1CAFF;">"M-x"</span>) 'helm-M-x)
  (global-set-key (kbd <span style="color: #C1CAFF;">"M-y"</span>) 'helm-show-kill-ring)
  (global-set-key (kbd <span style="color: #C1CAFF;">"C-x C-f"</span>) 'helm-find-files)
  (global-set-key (kbd <span style="color: #C1CAFF;">"C-c h o"</span>) 'helm-occur)
  (global-set-key (kbd <span style="color: #C1CAFF;">"C-c h g"</span>) 'helm-google-suggest)
  (global-set-key (kbd <span style="color: #C1CAFF;">"C-c h M-:"</span>) 'helm-eval-expression-with-eldoc)
  (define-key shell-mode-map (kbd <span style="color: #C1CAFF;">"C-c C-l"</span>) 'helm-comint-input-ring)
  (<span style="color: #66D9EF;">when</span> (executable-find <span style="color: #C1CAFF;">"curl"</span>)
    (<span style="color: #66D9EF;">setq</span> helm-google-suggest-use-curl-p t))

  (<span style="color: #66D9EF;">setq</span> helm-split-window-inside-p           t
        helm-move-to-line-cycle-in-source     t
        helm-ff-search-library-in-sexp        t
        helm-scroll-amount                    8
        helm-ff-file-name-history-use-recentf t
        helm-echo-input-in-header-line t
        helm-autoresize-max-height 0
        helm-autoresize-min-height 20)
  (helm-autoresize-mode 1)
  (helm-mode 1)
  (<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">helm-file-preview</span>
    <span style="color: #BB98FC;">:ensure</span> t
    <span style="color: #BB98FC;">:config</span>
    (<span style="color: #66D9EF;">setq</span> helm-file-preview-only-when-line-numbers t)
    (<span style="color: #66D9EF;">setq</span> helm-file-preview-preview-only t)
    (helm-file-preview-mode 1)))
</pre>
</div>
</div>
</div>
<div id="outline-container-orgbb13fce" class="outline-3">
<h3 id="orgbb13fce"><span class="section-number-3">2.2</span> helm-c-yasnippet</h3>
<div class="outline-text-3" id="text-2-2">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">helm-c-yasnippet</span>
  <span style="color: #BB98FC;">:ensure</span> t
  <span style="color: #BB98FC;">:config</span>
  (<span style="color: #66D9EF;">setq</span> helm-yas-space-match-any-greedy t)
  (global-set-key (kbd <span style="color: #C1CAFF;">"C-c y"</span>) 'helm-yas-complete))
</pre>
</div>
</div>
</div>

<div id="outline-container-org4a2508b" class="outline-3">
<h3 id="org4a2508b"><span class="section-number-3">2.3</span> no ideas wuts going on here</h3>
<div class="outline-text-3" id="text-2-3">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">defun</span> <span style="color: #84B5FF; font-style: italic;">spacemacs//helm-hide-minibuffer-maybe</span> ()
  <span style="color: #C1CAFF; font-style: italic;">"Hide minibuffer in Helm session if we use the header line as input field."</span>
  (<span style="color: #66D9EF;">when</span> (<span style="color: #66D9EF;">with-helm-buffer</span> helm-echo-input-in-header-line)
    (<span style="color: #66D9EF;">let</span> ((ov (make-overlay (point-min) (point-max) nil nil t)))
      (overlay-put ov 'window (selected-window))
      (overlay-put ov 'face
                   (<span style="color: #66D9EF;">let</span> ((bg-color (face-background 'default nil)))
                     `(<span style="color: #BB98FC;">:background</span> ,bg-color <span style="color: #BB98FC;">:foreground</span> ,bg-color)))
      (<span style="color: #66D9EF;">setq-local</span> cursor-type nil))))


(add-hook 'helm-minibuffer-set-up-hook
          'spacemacs//helm-hide-minibuffer-maybe)
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org48d0202" class="outline-2">
<h2 id="org48d0202"><span class="section-number-2">3</span> ggtags</h2>
<div class="outline-text-2" id="text-3">
</div>
<div id="outline-container-org7f05859" class="outline-3">
<h3 id="org7f05859"><span class="section-number-3">3.1</span> general configurations</h3>
<div class="outline-text-3" id="text-3-1">
<p>
emacs frontend to GNU Global source code tagging system
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">ggtags</span>
  <span style="color: #BB98FC;">:ensure</span> t
  <span style="color: #BB98FC;">:config</span>
  (add-hook 'c-mode-common-hook
            (<span style="color: #66D9EF;">lambda</span> ()
              (<span style="color: #66D9EF;">when</span> (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
                (ggtags-mode 1))))
  (define-key ggtags-mode-map (kbd <span style="color: #C1CAFF;">"C-c g s"</span>) 'ggtags-find-other-symbol)
  (define-key ggtags-mode-map (kbd <span style="color: #C1CAFF;">"C-c g h"</span>) 'ggtags-view-tag-history)
  (define-key ggtags-mode-map (kbd <span style="color: #C1CAFF;">"C-c g r"</span>) 'ggtags-find-reference)
  (define-key ggtags-mode-map (kbd <span style="color: #C1CAFF;">"C-c g f"</span>) 'ggtags-find-file)
  (define-key ggtags-mode-map (kbd <span style="color: #C1CAFF;">"C-c g c"</span>) 'ggtags-create-tags)
  (define-key ggtags-mode-map (kbd <span style="color: #C1CAFF;">"C-c g u"</span>) 'ggtags-update-tags)

  (define-key ggtags-mode-map (kbd <span style="color: #C1CAFF;">"M-,"</span>) 'pop-tag-mark)
  (<span style="color: #66D9EF;">setq-local</span> imenu-create-index-function #'ggtags-build-imenu-index))
</pre>
</div>
</div>
</div>
<div id="outline-container-orgd4d9c4b" class="outline-3">
<h3 id="orgd4d9c4b"><span class="section-number-3">3.2</span> interfacing gtags with helm</h3>
<div class="outline-text-3" id="text-3-2">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">helm-gtags</span>
  <span style="color: #BB98FC;">:ensure</span> t
  <span style="color: #BB98FC;">:config</span>
  (<span style="color: #66D9EF;">setq</span>
   helm-gtags-ignore-case t
   helm-gtags-auto-update t
   helm-gtags-use-input-at-cursor t
   helm-gtags-pulse-at-cursor t
   helm-gtags-prefix-key <span style="color: #C1CAFF;">"\C-ch"</span>
   helm-gtags-suggested-key-mapping t
   )

  (define-key helm-gtags-mode-map (kbd <span style="color: #C1CAFF;">"M-t"</span>) 'helm-gtags-find-tag)
  (define-key helm-gtags-mode-map (kbd <span style="color: #C1CAFF;">"M-r"</span>) 'helm-gtags-find-rtag)
  (define-key helm-gtags-mode-map (kbd <span style="color: #C1CAFF;">"M-s"</span>) 'helm-gtags-find-symbol)
  (define-key helm-gtags-mode-map (kbd <span style="color: #C1CAFF;">"M-g M-p"</span>) 'helm-gtags-parse-file)

  (define-key helm-gtags-mode-map (kbd <span style="color: #C1CAFF;">"C-c g a"</span>) 'helm-gtags-tags-in-this-function)
  (define-key helm-gtags-mode-map (kbd <span style="color: #C1CAFF;">"C-j"</span>) 'helm-gtags-select)
  (define-key helm-gtags-mode-map (kbd <span style="color: #C1CAFF;">"M-."</span>) 'helm-gtags-dwim)
  (define-key helm-gtags-mode-map (kbd <span style="color: #C1CAFF;">"M-,"</span>) 'helm-gtags-pop-stack)
  (define-key helm-gtags-mode-map (kbd <span style="color: #C1CAFF;">"C-c &lt;"</span>) 'helm-gtags-previous-history)
  (define-key helm-gtags-mode-map (kbd <span style="color: #C1CAFF;">"C-c &gt;"</span>) 'helm-gtags-next-history))
</pre>
</div>
</div>
</div>

<div id="outline-container-org16375d4" class="outline-3">
<h3 id="org16375d4"><span class="section-number-3">3.3</span> enabling everywhere</h3>
<div class="outline-text-3" id="text-3-3">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(add-hook 'dired-mode-hook 'gtags-mode 'helm-gtags-mode 'semantic-mode)
(add-hook 'eshell-mode-hook 'gtags-mode 'helm-gtags-mode 'semantic-mode)
(add-hook 'c-mode-hook 'gtags-mode 'helm-gtags-mode 'semantic-mode)
(add-hook 'c++-mode-hook 'gtags-mode 'helm-gtags-mode 'semantic-mode)
(add-hook 'asm-mode-hook 'gtags-mode 'helm-gtags-mode 'semantic-mode)

(ggtags-mode 1)
(gtags-mode 1)
(helm-gtags-mode 1)
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org8d29ac6" class="outline-2">
<h2 id="org8d29ac6"><span class="section-number-2">4</span> yasnippet</h2>
<div class="outline-text-2" id="text-4">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">yasnippet</span>
  <span style="color: #BB98FC;">:ensure</span> t
  <span style="color: #BB98FC;">:config</span>
  (yas-global-mode 1))
</pre>
</div>
</div>
</div>
<div id="outline-container-org34d05bc" class="outline-2">
<h2 id="org34d05bc"><span class="section-number-2">5</span> rust setup</h2>
<div class="outline-text-2" id="text-5">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">rust-mode</span>
  <span style="color: #BB98FC;">:ensure</span> t
  <span style="color: #BB98FC;">:config</span> (<span style="color: #66D9EF;">setq</span> rust-format-on-save t)
  (define-key rust-mode-map (kbd <span style="color: #C1CAFF;">"C-c C-c"</span>) 'rust-run))
</pre>
</div>
</div>
</div>
<div id="outline-container-org0b39edc" class="outline-2">
<h2 id="org0b39edc"><span class="section-number-2">6</span> ibuffer</h2>
<div class="outline-text-2" id="text-6">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(global-set-key (kbd <span style="color: #C1CAFF;">"C-x C-b"</span>) 'ibuffer)
(add-hook 'ibuffer-mode-hook
          '(lambda ()
             (<span style="color: #66D9EF;">setq</span> ibuffer-saved-filter-groups
                   '((<span style="color: #C1CAFF;">"home"</span>
                      (<span style="color: #C1CAFF;">"emacs-config"</span> (<span style="color: #66D9EF;">or</span> (filename . <span style="color: #C1CAFF;">".emacs.d"</span>)
                                          (filename . <span style="color: #C1CAFF;">"emacs-config"</span>)))
                      (<span style="color: #C1CAFF;">"Org"</span> (<span style="color: #66D9EF;">or</span> (mode . org-mode)
                                 (filename . <span style="color: #C1CAFF;">"OrgMode"</span>)))
                      (<span style="color: #C1CAFF;">"code"</span> (filename . <span style="color: #C1CAFF;">"code"</span>))
                      (<span style="color: #C1CAFF;">"Web Dev"</span> (<span style="color: #66D9EF;">or</span> (mode . html-mode)
                                     (mode . css-mode)))
                      (<span style="color: #C1CAFF;">"Subversion"</span> (name . <span style="color: #C1CAFF;">"</span><span style="color: #FFFFFF;">\</span><span style="color: #C1CAFF;">*svn"</span>))
                      (<span style="color: #C1CAFF;">"Magit"</span> (name . <span style="color: #C1CAFF;">"</span><span style="color: #FFFFFF;">\</span><span style="color: #C1CAFF;">*magit"</span>))
                      (<span style="color: #C1CAFF;">"ERC"</span> (mode . erc-mode))
                      (<span style="color: #C1CAFF;">"Help"</span> (<span style="color: #66D9EF;">or</span> (name . <span style="color: #C1CAFF;">"</span><span style="color: #FFFFFF;">\</span><span style="color: #C1CAFF;">*Help</span><span style="color: #FFFFFF;">\</span><span style="color: #C1CAFF;">*"</span>)
                                  (name . <span style="color: #C1CAFF;">"</span><span style="color: #FFFFFF;">\</span><span style="color: #C1CAFF;">*Apropos</span><span style="color: #FFFFFF;">\</span><span style="color: #C1CAFF;">*"</span>)
                                  (name . <span style="color: #C1CAFF;">"</span><span style="color: #FFFFFF;">\</span><span style="color: #C1CAFF;">*info</span><span style="color: #FFFFFF;">\</span><span style="color: #C1CAFF;">*"</span>))))))
             (ibuffer-auto-mode 1)
             (ibuffer-switch-to-saved-filter-groups <span style="color: #C1CAFF;">"home"</span>)
             (<span style="color: #66D9EF;">setq</span> ibuffer-expert t)
             (<span style="color: #66D9EF;">setq</span> ibuffer-show-empty-filter-groups nil)))
</pre>
</div>
</div>
</div>

<div id="outline-container-org8a4059c" class="outline-2">
<h2 id="org8a4059c"><span class="section-number-2">7</span> auto completion</h2>
<div class="outline-text-2" id="text-7">
<p>
Auto complete text inside of code
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">auto-complete</span>
  <span style="color: #BB98FC;">:ensure</span> t
  <span style="color: #BB98FC;">:config</span>
  (<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">auto-complete-config</span> <span style="color: #BB98FC;">:ensure</span> t)
  (ac-config-default)
  (auto-complete-mode 1))
</pre>
</div>
</div>
<div id="outline-container-orgeb1cacd" class="outline-3">
<h3 id="orgeb1cacd"><span class="section-number-3">7.1</span> interface with helm</h3>
<div class="outline-text-3" id="text-7-1">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">ac-helm</span>
  <span style="color: #BB98FC;">:ensure</span> t
  <span style="color: #BB98FC;">:config</span>
  (global-set-key (kbd <span style="color: #C1CAFF;">"C-:"</span>) 'ac-complete-with-helm)
  (define-key ac-complete-mode-map (kbd <span style="color: #C1CAFF;">"C-:"</span>) 'ac-complete-with-helm)
  (<span style="color: #66D9EF;">setq</span> ac-auto-show-menu 0.0))
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgc946c7c" class="outline-2">
<h2 id="orgc946c7c"><span class="section-number-2">8</span> web mode</h2>
<div class="outline-text-2" id="text-8">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">web-mode</span>
  <span style="color: #BB98FC;">:ensure</span> t
  <span style="color: #BB98FC;">:config</span>
  (add-to-list 'auto-mode-alist '(<span style="color: #C1CAFF;">"\\.html?\\'"</span> . web-mode) t)
  (<span style="color: #66D9EF;">setq</span> web-mode-engines-alist
        '((<span style="color: #C1CAFF;">"django"</span>    . <span style="color: #C1CAFF;">"\\.html\\'"</span>)))
  (<span style="color: #66D9EF;">setq</span> web-mode-ac-sources-alist
        '((<span style="color: #C1CAFF;">"css"</span> . (ac-source-css-property))
          (<span style="color: #C1CAFF;">"html"</span> . (ac-source-words-in-buffer ac-source-abbrev))))

  (<span style="color: #66D9EF;">setq</span> web-mode-enable-auto-closing t)
  (<span style="color: #66D9EF;">setq</span> web-mode-enable-auto-quoting t))
</pre>
</div>
</div>
</div>

<div id="outline-container-orgb4f188a" class="outline-2">
<h2 id="orgb4f188a"><span class="section-number-2">9</span> interface tweaks</h2>
<div class="outline-text-2" id="text-9">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">setq</span> inhibit-startup-message t)
(fset yes-on-no-p 'y-on-n-p)
(tool-bar-mode -1)
(global-set-key (kbd <span style="color: #C1CAFF;">"&lt;f5&gt;"</span>) 'revert-buffer)
(<span style="color: #66D9EF;">setq</span> visible-bell 1)
(toggle-scroll-bar -1)
(show-paren-mode 1)
(<span style="color: #66D9EF;">setq</span> electric-pair-preserve-balance nil)
(global-hl-line-mode 1)
(save-place-mode t)
(<span style="color: #66D9EF;">setq-default</span> indent-tabs-mode nil)
(put 'erase-buffer 'disabled nil)
(put 'narrow-to-region 'disabled nil)
</pre>
</div>
<p>
Cursor type
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">setq-default</span> cursor-type 'box)
(set-cursor-color <span style="color: #C1CAFF;">"#AEFF40"</span>)
(set-face-attribute 'region nil 
<span style="color: #BB98FC;">:background</span> <span style="color: #C1CAFF;">"#cc02bb"</span> 
<span style="color: #BB98FC;">:foreground</span> <span style="color: #C1CAFF;">"#d3e603"</span>)
</pre>
</div>
</div>
</div>

<div id="outline-container-org134d931" class="outline-2">
<h2 id="org134d931"><span class="section-number-2">10</span> miscellaneous small packages</h2>
<div class="outline-text-2" id="text-10">
</div>
<div id="outline-container-orge97d0df" class="outline-3">
<h3 id="orge97d0df"><span class="section-number-3">10.1</span> nyan mode</h3>
<div class="outline-text-3" id="text-10-1">
<p>
used for showing position in the current buffer
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">nyan-mode</span>
  <span style="color: #BB98FC;">:ensure</span> t
  <span style="color: #BB98FC;">:config</span> 
  (nyan-mode 1))
</pre>
</div>
</div>
</div>

<div id="outline-container-orgcda3f84" class="outline-3">
<h3 id="orgcda3f84"><span class="section-number-3">10.2</span> golden ratio mode</h3>
<div class="outline-text-3" id="text-10-2">
<p>
used for automatically resizing buffer sizes to be prettier
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">golden-ratio-mode</span>
  <span style="color: #BB98FC;">:ensure</span> t
  <span style="color: #BB98FC;">:config</span> 
  (golden-ratio-mode 1))
</pre>
</div>
</div>
</div>

<div id="outline-container-orga135455" class="outline-3">
<h3 id="orga135455"><span class="section-number-3">10.3</span> smart parentheses (?)</h3>
<div class="outline-text-3" id="text-10-3">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">smartparens</span>
  <span style="color: #BB98FC;">:ensure</span> t)
</pre>
</div>
</div>
</div>

<div id="outline-container-org7115731" class="outline-3">
<h3 id="org7115731"><span class="section-number-3">10.4</span> duplicate-thing</h3>
<div class="outline-text-3" id="text-10-4">
<p>
Used to duplicate current line
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">duplicate-thing</span>
  <span style="color: #BB98FC;">:ensure</span> t
  <span style="color: #BB98FC;">:config</span>
  (global-set-key (kbd <span style="color: #C1CAFF;">"M-c"</span>) 'duplicate-thing))
</pre>
</div>
</div>
</div>

<div id="outline-container-org23a50a4" class="outline-3">
<h3 id="org23a50a4"><span class="section-number-3">10.5</span> misc</h3>
<div class="outline-text-3" id="text-10-5">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">misc</span>
  <span style="color: #BB98FC;">:ensure</span> t
  <span style="color: #BB98FC;">:config</span>
  (autoload 'zap-up-to-char <span style="color: #C1CAFF;">"misc"</span> 'interactive)
  (global-set-key (kbd <span style="color: #C1CAFF;">"M-z"</span>) 'zap-up-to-char))
</pre>
</div>
</div>
</div>

<div id="outline-container-org2ca68f1" class="outline-3">
<h3 id="org2ca68f1"><span class="section-number-3">10.6</span> expand region</h3>
<div class="outline-text-3" id="text-10-6">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">expand-region</span>
  <span style="color: #BB98FC;">:ensure</span> t
  <span style="color: #BB98FC;">:config</span>
  (global-set-key (kbd <span style="color: #C1CAFF;">"C-="</span>) 'er/expand-region))
</pre>
</div>
</div>
</div>

<div id="outline-container-org5250b71" class="outline-3">
<h3 id="org5250b71"><span class="section-number-3">10.7</span> Sudo edit</h3>
<div class="outline-text-3" id="text-10-7">
<p>
Used for editing files that need sudo privileges
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">sudo-edit</span>
  <span style="color: #BB98FC;">:ensure</span> t)
</pre>
</div>
</div>
</div>

<div id="outline-container-orgc1cd939" class="outline-3">
<h3 id="orgc1cd939"><span class="section-number-3">10.8</span> beacon</h3>
<div class="outline-text-3" id="text-10-8">
<p>
When cursor jumps, new cursor position is highlighted so that you dont loose the cursor
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">beacon</span>
  <span style="color: #BB98FC;">:ensure</span> t
  <span style="color: #BB98FC;">:config</span>
  (beacon-mode 1)
  (<span style="color: #66D9EF;">setq</span> beacon-color <span style="color: #C1CAFF;">"#00aa33"</span>))
</pre>
</div>
</div>
</div>

<div id="outline-container-org77092dd" class="outline-3">
<h3 id="org77092dd"><span class="section-number-3">10.9</span> multiple cursors</h3>
<div class="outline-text-3" id="text-10-9">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">multiple-cursors</span>
  <span style="color: #BB98FC;">:ensure</span> t
  <span style="color: #BB98FC;">:config</span>
  (global-set-key (kbd <span style="color: #C1CAFF;">"C-c C-c"</span>) 'mc/edit-lines)
  (global-set-key (kbd <span style="color: #C1CAFF;">"C-&gt;"</span>) 'mc/mark-next-like-this)
  (global-set-key (kbd <span style="color: #C1CAFF;">"C-&lt;"</span>) 'mc/mark-previous-like-this)
  (global-set-key (kbd <span style="color: #C1CAFF;">"C-c C-&lt;"</span>) 'mc/mark-all-like-this))
</pre>
</div>
</div>
</div>

<div id="outline-container-orga57522e" class="outline-3">
<h3 id="orga57522e"><span class="section-number-3">10.10</span> which key</h3>
<div class="outline-text-3" id="text-10-10">
<p>
Used if you dont remember what the next keystroke in the command is, 
it gives you a small prompt with all possible next key strokes
</p>
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">which-key</span>
  <span style="color: #BB98FC;">:config</span> (which-key-mode))
</pre>
</div>
</div>
</div>

<div id="outline-container-org91bedf8" class="outline-3">
<h3 id="org91bedf8"><span class="section-number-3">10.11</span> ansi color</h3>
<div class="outline-text-3" id="text-10-11">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">ansi-color</span>
  <span style="color: #BB98FC;">:ensure</span> t
  <span style="color: #BB98FC;">:config</span>
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on))
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgf2f5503" class="outline-2">
<h2 id="orgf2f5503"><span class="section-number-2">11</span> theme</h2>
<div class="outline-text-2" id="text-11">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #66D9EF;">setf</span> custom-safe-themes t)
(<span style="color: #66D9EF;">use-package</span> <span style="color: #A6E22E;">zeno</span>
  <span style="color: #BB98FC;">:ensure</span> t
  <span style="color: #BB98FC;">:config</span>
  (load-theme 'zeno))
</pre>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="author">Author: Nikhil Chatterjee</p>
<p class="date">Created: 2020-07-23 Thu 12:55</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
