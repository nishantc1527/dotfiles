;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Random variable generators.

    integers
    --------
           uniform within range

    sequences
    ---------
           pick random element
           pick random sample
           pick weighted random sample
           generate random permutation

    distributions on the real line:
    ------------------------------
           uniform
           triangular
           normal (Gaussian)
           lognormal
           negative exponential
           gamma
           beta
           pareto
           Weibull

    distributions on the circle (angles 0 to 2pi)
    ---------------------------------------------
           circular uniform
           von Mises

General notes on the underlying Mersenne Twister core generator:

* The period is 2**19937-1.
* It is one of the most extensively tested generators in existence.
* The random() method is implemented in C, executes in a single Python step,
  and is, therefore, threadsafe.

\"\"\"" code nil nil [1 951])
            ("warnings" include nil nil [953 987])
            ("math" include nil nil [988 1064])
            ("math" include nil nil [1065 1136])
            ("os" include nil nil [1137 1171])
            ("_collections_abc" include nil nil [1172 1235])
            ("itertools" include nil nil [1236 1302])
            ("bisect" include nil nil [1303 1339])
            ("os" include nil nil [1340 1356])
            ("try" code nil nil [1358 1579])
            ("__all__" variable nil nil [1581 1948])
            ("NV_MAGICCONST" code nil nil [1950 1991])
            ("TWOPI" code nil nil [1992 2007])
            ("LOG4" variable nil nil [2008 2024])
            ("SG_MAGICCONST" code nil nil [2025 2056])
            ("BPF" variable nil nil [2057 2065])
            ("RECIP_BPF" variable nil nil [2101 2120])
            ("_random" include nil nil [2303 2317])
            ("Random" type
               (:documentation "Random number generator base class used by bound module functions.

    Used to instantiate instances of Random to get generators that don't
    share state.

    Class Random can also be subclassed if you want to use a different basic
    generator of your own devising: in that case, override the following
    methods:  random(), seed(), getstate(), and setstate().
    Optionally, implement a getrandbits() method so that randrange()
    can cover arbitrarily large ranges.

    "
                :superclasses ("_random.Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [2848 2859])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        \"\"\"" code nil (reparse-symbol indented_block_body) [2933 3040])
                            ("self" code nil (reparse-symbol indented_block_body) [3050 3062])
                            ("self" variable nil (reparse-symbol indented_block_body) [3071 3093]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2910 2914])
                            ("x" variable nil (reparse-symbol function_parameters) [2916 2917]))                          
                        :documentation "Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2897 3094])
                    ("__init_subclass__" function
                       (:documentation "Control how subclasses generate random integers.

        The algorithm a subclass can use depends on the random() and/or
        getrandbits() implementation available to it and determines
        whether it can generate random integers from arbitrarily large
        ranges.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3121 3124])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3129 3137]))                          )
                        (reparse-symbol indented_block_body) [3099 3830])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3844 3848])
                            ("a" variable nil (reparse-symbol function_parameters) [3850 3851])
                            ("version" variable nil (reparse-symbol function_parameters) [3858 3865]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If *a* is an int, all bits are used.

        For version 2 (the default), all of the bits are used if *a* is a str,
        bytes, or bytearray.  For version 1 (provided for reproducing random
        sequences from older versions of Python), the algorithm for str and
        bytes generates a narrower range of seeds.

        ")
                        (reparse-symbol indented_block_body) [3835 4995])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5013 5017]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [5000 5157])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5175 5179])
                            ("state" variable nil (reparse-symbol function_parameters) [5181 5186]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [5162 6198])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6638 6642]))                          )
                        (reparse-symbol indented_block_body) [6621 6689])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6711 6715])
                            ("state" variable nil (reparse-symbol function_parameters) [6717 6722]))                          )
                        (reparse-symbol indented_block_body) [6694 6768])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6788 6792]))                          )
                        (reparse-symbol indented_block_body) [6773 6846])
                    ("randrange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6927 6931])
                            ("start" variable nil (reparse-symbol function_parameters) [6933 6938])
                            ("stop" variable nil (reparse-symbol function_parameters) [6940 6944])
                            ("step" variable nil (reparse-symbol function_parameters) [6951 6955])
                            ("_int" variable nil (reparse-symbol function_parameters) [6959 6963]))                          
                        :documentation "Choose a random item from range(start, stop[, step]).

        This fixes the problem with randint() which includes the
        endpoint; in Python this is usually not what you want.

        ")
                        (reparse-symbol indented_block_body) [6913 8475])
                    ("randint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8492 8496])
                            ("a" variable nil (reparse-symbol function_parameters) [8498 8499])
                            ("b" variable nil (reparse-symbol function_parameters) [8501 8502]))                          
                        :documentation "Return random integer in range [a, b], including both end points.
        ")
                        (reparse-symbol indented_block_body) [8480 8633])
                    ("_randbelow_with_getrandbits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8670 8674])
                            ("n" variable nil (reparse-symbol function_parameters) [8676 8677]))                          )
                        (reparse-symbol indented_block_body) [8638 8990])
                    ("_randbelow_without_getrandbits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9030 9034])
                            ("n" variable nil (reparse-symbol function_parameters) [9036 9037])
                            ("int" variable nil (reparse-symbol function_parameters) [9039 9042])
                            ("maxsize" variable nil (reparse-symbol function_parameters) [9048 9055]))                          
                        :documentation "Return a random int in the range [0,n).  Raises ValueError if n==0.

        The implementation does not use getrandbits, but only random.
        ")
                        (reparse-symbol indented_block_body) [8995 9828])
                    ("_randbelow" variable nil (reparse-symbol indented_block_body) [9833 9873])
                    ("choice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9953 9957])
                            ("seq" variable nil (reparse-symbol function_parameters) [9959 9962]))                          
                        :documentation "Choose a random element from a non-empty sequence.")
                        (reparse-symbol indented_block_body) [9942 10213])
                    ("shuffle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10230 10234])
                            ("x" variable nil (reparse-symbol function_parameters) [10236 10237])
                            ("random" variable nil (reparse-symbol function_parameters) [10239 10245]))                          
                        :documentation "Shuffle list x in place, and return None.

        Optional argument random is a 0-argument function returning a
        random float in [0.0, 1.0); if it is the default None, the
        standard random.random will be used.

        ")
                        (reparse-symbol indented_block_body) [10218 11009])
                    ("sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11025 11029])
                            ("population" variable nil (reparse-symbol function_parameters) [11031 11041])
                            ("k" variable nil (reparse-symbol function_parameters) [11043 11044]))                          
                        :documentation "Chooses k unique random elements from a population sequence or set.

        Returns a new list containing elements from the population while
        leaving the original population unchanged.  The resulting list is
        in selection order so that all sub-slices will also be valid random
        samples.  This allows raffle winners (the sample) to be partitioned
        into grand prize and second place winners (the subslices).

        Members of the population need not be hashable or unique.  If the
        population contains repeats, then each occurrence is a possible
        selection in the sample.

        To choose a sample in a range of integers, use range as an argument.
        This is especially fast and space efficient for sampling from a
        large population:   sample(range(10000000), 60)
        ")
                        (reparse-symbol indented_block_body) [11014 14343])
                    ("choices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14360 14364])
                            ("population" variable nil (reparse-symbol function_parameters) [14366 14376])
                            ("weights" variable nil (reparse-symbol function_parameters) [14378 14385])
                            ("cum_weights" variable nil (reparse-symbol function_parameters) [14395 14406])
                            ("k" variable nil (reparse-symbol function_parameters) [14413 14414]))                          
                        :documentation "Return a k sized list of population elements chosen with replacement.

        If the relative weights or cumulative weights are not specified,
        the selections are made with equal probability.

        ")
                        (reparse-symbol indented_block_body) [14348 15456])
                    ("uniform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15611 15615])
                            ("a" variable nil (reparse-symbol function_parameters) [15617 15618])
                            ("b" variable nil (reparse-symbol function_parameters) [15620 15621]))                          )
                        (reparse-symbol indented_block_body) [15599 15748])
                    ("triangular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15825 15829])
                            ("low" variable nil (reparse-symbol function_parameters) [15831 15834])
                            ("high" variable nil (reparse-symbol function_parameters) [15840 15844])
                            ("mode" variable nil (reparse-symbol function_parameters) [15850 15854]))                          
                        :documentation "Triangular distribution.

        Continuous distribution bounded by given lower and upper limits,
        and having a given mode value in-between.

        http://en.wikipedia.org/wiki/Triangular_distribution

        ")
                        (reparse-symbol indented_block_body) [15810 16411])
                    ("normalvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16500 16504])
                            ("mu" variable nil (reparse-symbol function_parameters) [16506 16508])
                            ("sigma" variable nil (reparse-symbol function_parameters) [16510 16515]))                          
                        :documentation "Normal distribution.

        mu is the mean, and sigma is the standard deviation.

        ")
                        (reparse-symbol indented_block_body) [16482 17175])
                    ("lognormvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17268 17272])
                            ("mu" variable nil (reparse-symbol function_parameters) [17274 17276])
                            ("sigma" variable nil (reparse-symbol function_parameters) [17278 17283]))                          
                        :documentation "Log normal distribution.

        If you take the natural logarithm of this distribution, you'll get a
        normal distribution with mean mu and standard deviation sigma.
        mu can have any value, and sigma must be greater than zero.

        ")
                        (reparse-symbol indented_block_body) [17249 17603])
                    ("expovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17695 17699])
                            ("lambd" variable nil (reparse-symbol function_parameters) [17701 17706]))                          
                        :documentation "Exponential distribution.

        lambd is 1.0 divided by the desired mean.  It should be
        nonzero.  (The parameter would be called \"lambda\", but that is
        a reserved word in Python.)  Returned values range from 0 to
        positive infinity if lambd is positive, and from negative
        infinity to 0 if lambd is negative.

        ")
                        (reparse-symbol indented_block_body) [17679 18320])
                    ("vonmisesvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18414 18418])
                            ("mu" variable nil (reparse-symbol function_parameters) [18420 18422])
                            ("kappa" variable nil (reparse-symbol function_parameters) [18424 18429]))                          
                        :documentation "Circular data distribution.

        mu is the mean angle, expressed in radians between 0 and 2*pi, and
        kappa is the concentration parameter, which must be greater than or
        equal to zero.  If kappa is equal to zero, this distribution reduces
        to a uniform random angle over the range 0 to 2*pi.

        ")
                        (reparse-symbol indented_block_body) [18394 19784])
                    ("gammavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19871 19875])
                            ("alpha" variable nil (reparse-symbol function_parameters) [19877 19882])
                            ("beta" variable nil (reparse-symbol function_parameters) [19884 19888]))                          
                        :documentation "Gamma distribution.  Not the gamma function!

        Conditions on the parameters are alpha > 0 and beta > 0.

        The probability distribution function is:

                    x ** (alpha - 1) * math.exp(-x / beta)
          pdf(x) =  --------------------------------------
                      math.gamma(alpha) * beta ** alpha

        ")
                        (reparse-symbol indented_block_body) [19854 22013])
                    ("gauss" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22101 22105])
                            ("mu" variable nil (reparse-symbol function_parameters) [22107 22109])
                            ("sigma" variable nil (reparse-symbol function_parameters) [22111 22116]))                          
                        :documentation "Gaussian distribution.

        mu is the mean, and sigma is the standard deviation.  This is
        slightly faster than the normalvariate() function.

        Not thread-safe without a lock around calls.

        ")
                        (reparse-symbol indented_block_body) [22091 23427])
                    ("betavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23923 23927])
                            ("alpha" variable nil (reparse-symbol function_parameters) [23929 23934])
                            ("beta" variable nil (reparse-symbol function_parameters) [23936 23940]))                          
                        :documentation "Beta distribution.

        Conditions on the parameters are alpha > 0 and beta > 0.
        Returned values range between 0 and 1.

        ")
                        (reparse-symbol indented_block_body) [23907 24400])
                    ("paretovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24476 24480])
                            ("alpha" variable nil (reparse-symbol function_parameters) [24482 24487]))                          
                        :documentation "Pareto distribution.  alpha is the shape parameter.")
                        (reparse-symbol indented_block_body) [24458 24651])
                    ("weibullvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24729 24733])
                            ("alpha" variable nil (reparse-symbol function_parameters) [24735 24740])
                            ("beta" variable nil (reparse-symbol function_parameters) [24742 24746]))                          
                        :documentation "Weibull distribution.

        alpha is the scale parameter and beta is the shape parameter.

        ")
                        (reparse-symbol indented_block_body) [24710 24999]))                  
                :type "class")
                nil [2319 24999])
            ("SystemRandom" type
               (:documentation "Alternate random number generator using sources provided
    by the operating system (such as /dev/urandom on Unix or
    CryptGenRandom on Windows).

     Not available on all systems (see os.urandom() for details).
    "
                :superclasses ("Random")
                :members 
                  ( ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25347 25351]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [25336 25489])
                    ("getrandbits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25510 25514])
                            ("k" variable nil (reparse-symbol function_parameters) [25516 25517]))                          
                        :documentation "getrandbits(k) -> x.  Generates an int with k random bits.")
                        (reparse-symbol indented_block_body) [25494 25892])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25906 25910])
                            ("args" variable nil (reparse-symbol function_parameters) [25912 25917])
                            ("kwds" variable nil (reparse-symbol function_parameters) [25919 25925]))                          )
                        (reparse-symbol indented_block_body) [25897 26019])
                    ("_notimplemented" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26044 26048])
                            ("args" variable nil (reparse-symbol function_parameters) [26050 26055])
                            ("kwds" variable nil (reparse-symbol function_parameters) [26057 26063]))                          )
                        (reparse-symbol indented_block_body) [26024 26222])
                    ("getstate" variable nil (reparse-symbol indented_block_body) [26226 26263]))                  
                :type "class")
                nil [25071 26264])
            ("_test_generator" function (:arguments 
              ( ("n" variable nil (reparse-symbol function_parameters) [26344 26345])
                ("func" variable nil (reparse-symbol function_parameters) [26347 26351])
                ("args" variable nil (reparse-symbol function_parameters) [26353 26357]))              ) nil [26324 26907])
            ("_test" function (:arguments 
              ( ("N" variable nil (reparse-symbol function_parameters) [26919 26920]))              ) nil [26909 27707])
            ("_inst" variable nil nil [28039 28055])
            ("seed" variable nil nil [28056 28073])
            ("random" variable nil nil [28074 28095])
            ("uniform" variable nil nil [28096 28119])
            ("triangular" variable nil nil [28120 28149])
            ("randint" variable nil nil [28150 28173])
            ("choice" variable nil nil [28174 28195])
            ("randrange" variable nil nil [28196 28223])
            ("sample" variable nil nil [28224 28245])
            ("shuffle" variable nil nil [28246 28269])
            ("choices" variable nil nil [28270 28293])
            ("normalvariate" variable nil nil [28294 28329])
            ("lognormvariate" variable nil nil [28330 28367])
            ("expovariate" variable nil nil [28368 28399])
            ("vonmisesvariate" variable nil nil [28400 28439])
            ("gammavariate" variable nil nil [28440 28473])
            ("gauss" variable nil nil [28474 28493])
            ("betavariate" variable nil nil [28494 28525])
            ("paretovariate" variable nil nil [28526 28561])
            ("weibullvariate" variable nil nil [28562 28599])
            ("getstate" variable nil nil [28600 28625])
            ("setstate" variable nil nil [28626 28651])
            ("getrandbits" variable nil nil [28652 28683])
            ("if" code nil nil [28685 28762])
            ("if" code nil nil [28764 28803]))          
      :file "random.py"
      :pointmax 28803
      :fsize 28802
      :lastmodtime '(24336 23930 0 0)
      :unmatched-syntax '((NAME 16148 . 16149) (IF 16156 . 16158) (ELSE 16172 . 16176) (MULT 14392 . 14393) (COMMA 14393 . 14394) (RAISE 10124 . 10129) (FROM 10181 . 10185) (NEWLINE 10190 . 10191) (INDENT_BLOCK 5918 . 5957) (NEWLINE 5917 . 5918) (COLON 5916 . 5917) (TRY 5803 . 5806) (AS 5912 . 5914) (NAME 4701 . 4702) (IF 4708 . 4710) (ELSE 4719 . 4723) (NAME 4539 . 4540) (IF 4558 . 4560) (ELSE 4563 . 4567) (NAME 4472 . 4473) (IF 4496 . 4498) (ELSE 4520 . 4524) (COMMA 3127 . 3128) (DIV 3126 . 3127)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Python part of the warnings subsystem.\"\"\"" code nil nil [1 45])
            ("sys" include nil nil [47 57])
            ("__all__" variable nil nil [60 218])
            ("showwarning" function
               (:documentation "Hook to write a warning to a file; replace if you like."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [236 243])
                    ("category" variable nil (reparse-symbol function_parameters) [245 253])
                    ("filename" variable nil (reparse-symbol function_parameters) [255 263])
                    ("lineno" variable nil (reparse-symbol function_parameters) [265 271])
                    ("file" variable nil (reparse-symbol function_parameters) [273 277])
                    ("line" variable nil (reparse-symbol function_parameters) [284 288]))                  )
                nil [220 463])
            ("formatwarning" function
               (:documentation "Function to format a warning the standard way."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [482 489])
                    ("category" variable nil (reparse-symbol function_parameters) [491 499])
                    ("filename" variable nil (reparse-symbol function_parameters) [501 509])
                    ("lineno" variable nil (reparse-symbol function_parameters) [511 517])
                    ("line" variable nil (reparse-symbol function_parameters) [519 523]))                  )
                nil [464 698])
            ("_showwarnmsg_impl" function (:arguments 
              ( ("msg" variable nil (reparse-symbol function_parameters) [721 724]))              ) nil [699 1102])
            ("_formatwarnmsg_impl" function (:arguments 
              ( ("msg" variable nil (reparse-symbol function_parameters) [1127 1130]))              ) nil [1103 3144])
            ("_showwarning_orig" variable nil nil [3202 3233])
            ("_showwarnmsg" function
               (:documentation "Hook to write a warning to a file; replace if you like."
                :arguments 
                  ( ("msg" variable nil (reparse-symbol function_parameters) [3252 3255]))                  )
                nil [3235 3805])
            ("_formatwarning_orig" variable nil nil [3863 3898])
            ("_formatwarnmsg" function
               (:documentation "Function to format a warning the standard way."
                :arguments 
                  ( ("msg" variable nil (reparse-symbol function_parameters) [3919 3922]))                  )
                nil [3900 4300])
            ("filterwarnings" function
               (:documentation "Insert an entry into the list of warnings filters (at the front).

    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'message' -- a regex that the warning message must match
    'category' -- a class that the warning must be a subclass of
    'module' -- a regex that the module name must match
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [4320 4326])
                    ("message" variable nil (reparse-symbol function_parameters) [4328 4335])
                    ("category" variable nil (reparse-symbol function_parameters) [4340 4348])
                    ("module" variable nil (reparse-symbol function_parameters) [4358 4364])
                    ("lineno" variable nil (reparse-symbol function_parameters) [4369 4375])
                    ("append" variable nil (reparse-symbol function_parameters) [4398 4404]))                  )
                nil [4301 5693])
            ("simplefilter" function
               (:documentation "Insert a simple entry into the list of warnings filters (at the front).

    A simple filter matches all modules and messages.
    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'category' -- a class that the warning must be a subclass of
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [5711 5717])
                    ("category" variable nil (reparse-symbol function_parameters) [5719 5727])
                    ("lineno" variable nil (reparse-symbol function_parameters) [5737 5743])
                    ("append" variable nil (reparse-symbol function_parameters) [5747 5753]))                  )
                nil [5694 6485])
            ("_add_filter" function (:arguments 
              ( ("item" variable nil (reparse-symbol function_parameters) [6502 6507])
                ("append" variable nil (reparse-symbol function_parameters) [6509 6515]))              ) nil [6486 6897])
            ("resetwarnings" function (:documentation "Clear the list of warning filters, so that no filters are active.") nil [6898 7038])
            ("_OptionError" type
               (:documentation "Exception used by option processing helpers."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [7129 7133]))                  
                :type "class")
                nil [7039 7134])
            ("_processoptions" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [7213 7217]))              ) nil [7193 7388])
            ("_setoption" function (:arguments 
              ( ("arg" variable nil (reparse-symbol function_parameters) [7435 7438]))              ) nil [7420 8288])
            ("_getaction" function (:arguments 
              ( ("action" variable nil (reparse-symbol function_parameters) [8330 8336]))              ) nil [8315 8615])
            ("_getcategory" function (:arguments 
              ( ("category" variable nil (reparse-symbol function_parameters) [8659 8667]))              ) nil [8642 9311])
            ("_is_internal_frame" function
               (:documentation "Signal whether the frame is an internal CPython implementation detail."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [9336 9341]))                  )
                nil [9313 9529])
            ("_next_external_frame" function
               (:documentation "Find the next frame that doesn't involve CPython internals."
                :arguments 
                  ( ("frame" variable nil (reparse-symbol function_parameters) [9556 9561]))                  )
                nil [9531 9764])
            ("warn" function
               (:documentation "Issue a warning, or maybe ignore it or raise an exception."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [9814 9821])
                    ("category" variable nil (reparse-symbol function_parameters) [9823 9831])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [9838 9848])
                    ("source" variable nil (reparse-symbol function_parameters) [9852 9858]))                  )
                nil [9805 11431])
            ("warn_explicit" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [11450 11457])
                ("category" variable nil (reparse-symbol function_parameters) [11459 11467])
                ("filename" variable nil (reparse-symbol function_parameters) [11469 11477])
                ("lineno" variable nil (reparse-symbol function_parameters) [11479 11485])
                ("module" variable nil (reparse-symbol function_parameters) [11505 11511])
                ("registry" variable nil (reparse-symbol function_parameters) [11518 11526])
                ("module_globals" variable nil (reparse-symbol function_parameters) [11533 11547])
                ("source" variable nil (reparse-symbol function_parameters) [11572 11578]))              ) nil [11432 13634])
            ("WarningMessage" type
               (:superclasses ("object")
                :members 
                  ( ("_WARNING_DETAILS" variable nil (reparse-symbol indented_block_body) [13671 13785])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [13908 13930])
                            ("self" variable nil (reparse-symbol indented_block_body) [13939 13963])
                            ("self" variable nil (reparse-symbol indented_block_body) [13972 13996])
                            ("self" variable nil (reparse-symbol indented_block_body) [14005 14025])
                            ("self" variable nil (reparse-symbol indented_block_body) [14034 14050])
                            ("self" variable nil (reparse-symbol indented_block_body) [14059 14075])
                            ("self" variable nil (reparse-symbol indented_block_body) [14084 14104])
                            ("None" code nil (reparse-symbol indented_block_body) [14170 14174]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13804 13808])
                            ("message" variable nil (reparse-symbol function_parameters) [13810 13817])
                            ("category" variable nil (reparse-symbol function_parameters) [13819 13827])
                            ("filename" variable nil (reparse-symbol function_parameters) [13829 13837])
                            ("lineno" variable nil (reparse-symbol function_parameters) [13839 13845])
                            ("file" variable nil (reparse-symbol function_parameters) [13847 13851])
                            ("line" variable nil (reparse-symbol function_parameters) [13875 13879])
                            ("source" variable nil (reparse-symbol function_parameters) [13886 13892]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13791 14175])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14192 14196]))                          )
                        (reparse-symbol indented_block_body) [14180 14423]))                  
                :type "class")
                nil [13636 14423])
            ("catch_warnings" type
               (:documentation "A context manager that copies and restores the warnings filter upon
    exiting the context.

    The 'record' argument specifies whether warnings should be captured by a
    custom implementation of warnings.showwarning() and be appended to a list
    returned by the context manager. Otherwise None is returned by the context
    manager. The objects appended to the list are arguments whose attributes
    mirror the arguments to showwarning().

    The 'module' argument is to specify an alternative module to the module
    named 'warnings' and imported under that name. This argument is only useful
    when testing the warnings module itself.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        \"\"\"" code nil (reparse-symbol indented_block_body) [15185 15425])
                            ("self" variable nil (reparse-symbol indented_block_body) [15434 15455])
                            ("module" code nil (reparse-symbol indented_block_body) [15526 15532])
                            ("self" variable nil (reparse-symbol indented_block_body) [15541 15562]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15140 15144])
                            ("record" variable nil (reparse-symbol function_parameters) [15149 15155])
                            ("module" variable nil (reparse-symbol function_parameters) [15163 15169]))                          
                        :documentation "Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15127 15563])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15581 15585]))                          )
                        (reparse-symbol indented_block_body) [15568 15863])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15882 15886]))                          )
                        (reparse-symbol indented_block_body) [15868 16627])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16645 16649])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [16651 16660]))                          )
                        (reparse-symbol indented_block_body) [16632 16974]))                  
                :type "class")
                nil [14425 16974])
            ("_warn_unawaited_coroutine" function (:arguments 
              ( ("coro" variable nil (reparse-symbol function_parameters) [17073 17077]))              ) nil [17043 18140])
            ("try" code nil nil [18592 19066])
            ("_processoptions" code nil nil [19092 19124])
            ("if" code nil nil [19125 19665])
            ("del" code nil nil [19666 19688]))          
      :file "warnings.py"
      :pointmax 19689
      :fsize 19688
      :lastmodtime '(24336 23930 0 0)
      :unmatched-syntax '((NAME 15464 . 15468) (IF 15503 . 15505) (ELSE 15521 . 15525) (MULT 15146 . 15147) (COMMA 15147 . 15148) (NAME 14113 . 14117) (IF 14153 . 14155) (ELSE 14165 . 14169) (RAISE 9111 . 9116) (FROM 9176 . 9180) (NEWLINE 9185 . 9186) (RAISE 8967 . 8972) (FROM 9025 . 9029) (NEWLINE 9034 . 9035) (RAISE 8135 . 8140) (FROM 8187 . 8191) (NEWLINE 8196 . 8197) (INDENT_BLOCK 7318 . 7388) (NEWLINE 7317 . 7318) (COLON 7316 . 7317) (TRY 7249 . 7252) (AS 7310 . 7312)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"OS routines for NT or Posix depending on what system we're on.

This exports:
  - all functions from posix or nt, e.g. unlink, stat, etc.
  - os.path is either posixpath or ntpath
  - os.name is either 'posix' or 'nt'
  - os.curdir is a string representing the current directory (always '.')
  - os.pardir is a string representing the parent directory (always '..')
  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')
  - os.extsep is the extension separator (always '.')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).
\"\"\"" code nil nil [1 1110])
            ("abc" include nil nil [1115 1125])
            ("sys" include nil nil [1126 1136])
            ("stat" include nil nil [1137 1154])
            ("_collections_abc" include nil nil [1156 1199])
            ("_names" variable nil nil [1201 1234])
            ("__all__" variable nil nil [1284 1530])
            ("_exists" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [1544 1548]))              ) nil [1532 1580])
            ("_get_exports_list" function (:arguments 
              ( ("module" variable nil (reparse-symbol function_parameters) [1603 1609]))              ) nil [1581 1739])
            ("if" code nil nil [1852 2668])
            ("sys" variable nil nil [2669 2698])
            ("" code nil nil [2719 2787])
            ("del" code nil nil [2789 2799])
            ("if" code nil nil [2802 6063])
            ("SEEK_SET" variable nil nil [6255 6267])
            ("SEEK_CUR" variable nil nil [6268 6280])
            ("SEEK_END" variable nil nil [6281 6293])
            ("makedirs" function
               (:documentation "makedirs(name [, mode=0o777][, exist_ok=False])

    Super-mkdir; create a leaf directory and all intermediate ones.  Works like
    mkdir, except that any intermediate path segment (not just the rightmost)
    will be created if it does not exist. If the target directory already
    exists, raise an OSError if exist_ok is False. Otherwise no exception is
    raised.  This is recursive.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [6399 6403])
                    ("mode" variable nil (reparse-symbol function_parameters) [6405 6409])
                    ("exist_ok" variable nil (reparse-symbol function_parameters) [6417 6425]))                  )
                nil [6386 7618])
            ("removedirs" function
               (:documentation "removedirs(name)

    Super-rmdir; remove a leaf directory and all empty intermediate
    ones.  Works like rmdir except that, if the leaf directory is
    successfully removed, directories corresponding to rightmost path
    segments will be pruned away until either the whole path is
    consumed or an error occurs.  Errors during this latter phase are
    ignored -- they generally mean that a directory was not empty.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [7634 7638]))                  )
                nil [7619 8327])
            ("renames" function
               (:documentation "renames(old, new)

    Super-rename; create directories as necessary and delete any left
    empty.  Works like rename, except creation of any intermediate
    directories needed to make the new pathname good is attempted
    first.  After the rename, directories corresponding to rightmost
    path segments of the old name will be pruned until either the
    whole path is consumed or a nonempty directory is found.

    Note: this function can fail with the new directory structure made
    if you lack permissions needed to unlink the leaf directory or
    file.

    "
                :arguments 
                  ( ("old" variable nil (reparse-symbol function_parameters) [8340 8343])
                    ("new" variable nil (reparse-symbol function_parameters) [8345 8348]))                  )
                nil [8328 9197])
            ("__all__" code nil nil [9198 9251])
            ("walk" function
               (:documentation "Directory tree generator.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), yields a 3-tuple

        dirpath, dirnames, filenames

    dirpath is a string, the path to the directory.  dirnames is a list of
    the names of the subdirectories in dirpath (excluding '.' and '..').
    filenames is a list of the names of the non-directory files in dirpath.
    Note that the names in the lists are just names, with no path components.
    To get a full path (which begins with top) to a file or directory in
    dirpath, do os.path.join(dirpath, name).

    If optional arg 'topdown' is true or not specified, the triple for a
    directory is generated before the triples for any of its subdirectories
    (directories are generated top down).  If topdown is false, the triple
    for a directory is generated after the triples for all of its
    subdirectories (directories are generated bottom up).

    When topdown is true, the caller can modify the dirnames list in-place
    (e.g., via del or slice assignment), and walk will only recurse into the
    subdirectories whose names remain in dirnames; this can be used to prune the
    search, or to impose a specific order of visiting.  Modifying dirnames when
    topdown is false has no effect on the behavior of os.walk(), since the
    directories in dirnames have already been generated by the time dirnames
    itself is generated. No matter the value of topdown, the list of
    subdirectories is retrieved before the tuples for the directory and its
    subdirectories are generated.

    By default errors from the os.scandir() call are ignored.  If
    optional arg 'onerror' is specified, it should be a function; it
    will be called with one argument, an OSError instance.  It can
    report the error to continue with the walk, or raise the exception
    to abort the walk.  Note that the filename is available as the
    filename attribute of the exception object.

    By default, os.walk does not follow symbolic links to subdirectories on
    systems that support them.  In order to get this functionality, set the
    optional argument 'followlinks' to true.

    Caution:  if you pass a relative pathname for top, don't change the
    current working directory between resumptions of walk.  walk never
    changes the current directory, and assumes that the client doesn't
    either.

    Example:

    import os
    from os.path import join, getsize
    for root, dirs, files in os.walk('python/Lib/email'):
        print(root, \"consumes\", end=\"\")
        print(sum(getsize(join(root, name)) for name in files), end=\"\")
        print(\"bytes in\", len(files), \"non-directory files\")
        if 'CVS' in dirs:
            dirs.remove('CVS')  # don't visit CVS directories

    "
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [9262 9265])
                    ("topdown" variable nil (reparse-symbol function_parameters) [9267 9274])
                    ("onerror" variable nil (reparse-symbol function_parameters) [9281 9288])
                    ("followlinks" variable nil (reparse-symbol function_parameters) [9295 9306]))                  )
                nil [9253 15105])
            ("__all__" code nil nil [15106 15128])
            ("if" code nil nil [15130 19430])
            ("execl" function
               (:documentation "execl(file, *args)

    Execute the executable file with argument list args, replacing the
    current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [19441 19445])
                    ("args" variable nil (reparse-symbol function_parameters) [19447 19452]))                  )
                nil [19431 19600])
            ("execle" function
               (:documentation "execle(file, *args, env)

    Execute the executable file with argument list args and
    environment env, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [19612 19616])
                    ("args" variable nil (reparse-symbol function_parameters) [19618 19623]))                  )
                nil [19601 19827])
            ("execlp" function
               (:documentation "execlp(file, *args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [19839 19843])
                    ("args" variable nil (reparse-symbol function_parameters) [19845 19850]))                  )
                nil [19828 20036])
            ("execlpe" function
               (:documentation "execlpe(file, *args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env, replacing the current
    process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [20049 20053])
                    ("args" variable nil (reparse-symbol function_parameters) [20055 20060]))                  )
                nil [20037 20306])
            ("execvp" function
               (:documentation "execvp(file, args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [20318 20322])
                    ("args" variable nil (reparse-symbol function_parameters) [20324 20328]))                  )
                nil [20307 20559])
            ("execvpe" function
               (:documentation "execvpe(file, args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env, replacing the
    current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [20572 20576])
                    ("args" variable nil (reparse-symbol function_parameters) [20578 20582])
                    ("env" variable nil (reparse-symbol function_parameters) [20584 20587]))                  )
                nil [20560 20853])
            ("__all__" code nil nil [20854 20926])
            ("_execvpe" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [20941 20945])
                ("args" variable nil (reparse-symbol function_parameters) [20947 20951])
                ("env" variable nil (reparse-symbol function_parameters) [20953 20956]))              ) nil [20928 21756])
            ("get_exec_path" function
               (:documentation "Returns the sequence of directories that will be searched for the
    named executable (similar to a shell) when launching a process.

    *env* must be an environment variable dict or None.  If *env* is None,
    os.environ will be used.
    "
                :arguments 
                  ( ("env" variable nil (reparse-symbol function_parameters) [21776 21779]))                  )
                nil [21758 23229])
            ("_collections_abc" include nil nil [23304 23347])
            ("_Environ" type
               (:superclasses ("MutableMapping")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [23485 23511])
                            ("self" variable nil (reparse-symbol indented_block_body) [23520 23546])
                            ("self" variable nil (reparse-symbol indented_block_body) [23555 23585])
                            ("self" variable nil (reparse-symbol indented_block_body) [23594 23624])
                            ("self" variable nil (reparse-symbol indented_block_body) [23633 23653])
                            ("self" variable nil (reparse-symbol indented_block_body) [23662 23686])
                            ("self" variable nil (reparse-symbol indented_block_body) [23695 23712]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23398 23402])
                            ("data" variable nil (reparse-symbol function_parameters) [23404 23408])
                            ("encodekey" variable nil (reparse-symbol function_parameters) [23410 23419])
                            ("decodekey" variable nil (reparse-symbol function_parameters) [23421 23430])
                            ("encodevalue" variable nil (reparse-symbol function_parameters) [23432 23443])
                            ("decodevalue" variable nil (reparse-symbol function_parameters) [23445 23456])
                            ("putenv" variable nil (reparse-symbol function_parameters) [23458 23464])
                            ("unsetenv" variable nil (reparse-symbol function_parameters) [23466 23474]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23385 23713])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23734 23738])
                            ("key" variable nil (reparse-symbol function_parameters) [23740 23743]))                          )
                        (reparse-symbol indented_block_body) [23718 23974])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23995 23999])
                            ("key" variable nil (reparse-symbol function_parameters) [24001 24004])
                            ("value" variable nil (reparse-symbol function_parameters) [24006 24011]))                          )
                        (reparse-symbol indented_block_body) [23979 24152])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24173 24177])
                            ("key" variable nil (reparse-symbol function_parameters) [24179 24182]))                          )
                        (reparse-symbol indented_block_body) [24157 24436])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24454 24458]))                          )
                        (reparse-symbol indented_block_body) [24441 24613])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24630 24634]))                          )
                        (reparse-symbol indented_block_body) [24618 24668])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24686 24690]))                          )
                        (reparse-symbol indented_block_body) [24673 24875])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24889 24893]))                          )
                        (reparse-symbol indented_block_body) [24880 24922])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24942 24946])
                            ("key" variable nil (reparse-symbol function_parameters) [24948 24951])
                            ("value" variable nil (reparse-symbol function_parameters) [24953 24958]))                          )
                        (reparse-symbol indented_block_body) [24927 25044]))                  
                :type "class")
                nil [23349 25044])
            ("try" code nil nil [25045 25198])
            ("try" code nil nil [25199 25367])
            ("_createenviron" function nil nil [25368 26411])
            ("environ" variable nil nil [26430 26456])
            ("del" code nil nil [26457 26475])
            ("getenv" function
               (:documentation "Get an environment variable, return None if it doesn't exist.
    The optional second argument can specify an alternate default.
    key, default and the result are str."
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [26489 26492])
                    ("default" variable nil (reparse-symbol function_parameters) [26494 26501]))                  )
                nil [26478 26726])
            ("supports_bytes_environ" variable nil nil [26727 26766])
            ("__all__" code nil nil [26767 26819])
            ("if" code nil nil [26821 27501])
            ("_fscodec" function nil nil [27502 28697])
            ("fsencode, fsdecode" code nil nil [28698 28729])
            ("del" code nil nil [28730 28742])
            ("if" code nil nil [28787 32030])
            ("if" code nil nil [32032 33007])
            ("if" code nil nil [33009 34091])
            ("popen" function (:arguments 
              ( ("cmd" variable nil (reparse-symbol function_parameters) [34123 34126])
                ("mode" variable nil (reparse-symbol function_parameters) [34128 34132])
                ("buffering" variable nil (reparse-symbol function_parameters) [34138 34147]))              ) nil [34113 35020])
            ("_wrap_close" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [35163 35184])
                            ("self" variable nil (reparse-symbol indented_block_body) [35193 35210]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35134 35138])
                            ("stream" variable nil (reparse-symbol function_parameters) [35140 35146])
                            ("proc" variable nil (reparse-symbol function_parameters) [35148 35152]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [35121 35211])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35225 35229]))                          )
                        (reparse-symbol indented_block_body) [35215 35492])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35510 35514]))                          )
                        (reparse-symbol indented_block_body) [35496 35537])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35554 35558])
                            ("args" variable nil (reparse-symbol function_parameters) [35560 35565]))                          )
                        (reparse-symbol indented_block_body) [35541 35589])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35609 35613])
                            ("name" variable nil (reparse-symbol function_parameters) [35615 35619]))                          )
                        (reparse-symbol indented_block_body) [35593 35665])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35682 35686]))                          )
                        (reparse-symbol indented_block_body) [35669 35723]))                  
                :type "class")
                nil [35098 35723])
            ("fdopen" function (:arguments 
              ( ("fd" variable nil (reparse-symbol function_parameters) [35756 35758])
                ("args" variable nil (reparse-symbol function_parameters) [35760 35765])
                ("kwargs" variable nil (reparse-symbol function_parameters) [35767 35775]))              ) nil [35745 35941])
            ("_fspath" function
               (:documentation "Return the path representation of a path-like object.

    If str or bytes is passed in, it is returned unchanged. Otherwise the
    os.PathLike interface is used to get the path representation. If the
    path representation is not str or bytes, TypeError is raised. If the
    provided path is not str, bytes, or os.PathLike, TypeError is raised.
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [36051 36055]))                  )
                nil [36039 37173])
            ("if" code nil nil [37289 37367])
            ("PathLike" type
               (:documentation "Abstract base class for implementing the file system path protocol."
                :superclasses ("abc.ABC")
                :members 
                  ( ("__fspath__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abc.abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37517 37521]))                          
                        :documentation "Return the file system path representation of the object.")
                        (reparse-symbol indented_block_body) [37478 37630])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [37673 37676])
                            ("subclass" variable nil (reparse-symbol function_parameters) [37678 37686]))                          )
                        (reparse-symbol indented_block_body) [37635 37805]))                  
                :type "class")
                nil [37369 37805])
            ("if" code nil nil [37807 38996]))          
      :file "os.py"
      :pointmax 38996
      :fsize 38995
      :lastmodtime '(24336 23930 0 0)
      :unmatched-syntax '((RAISE 24406 . 24411) (FROM 24426 . 24430) (NEWLINE 24435 . 24436) (RAISE 23905 . 23910) (FROM 23925 . 23929) (NEWLINE 23934 . 23935) (INDENT_BLOCK 21594 . 21683) (NEWLINE 21593 . 21594) (COLON 21592 . 21593) (AS 21588 . 21590) (EXCEPT 21573 . 21579) (INDENT_BLOCK 21540 . 21565) (NEWLINE 21539 . 21540) (COLON 21538 . 21539) (TRY 21432 . 21435) (AS 21534 . 21536) (INDENT_BLOCK 18444 . 19328) (NEWLINE 18443 . 18444) (COLON 18442 . 18443) (FOR 18383 . 18386) (IF 18400 . 18402) (ELSE 18419 . 18423) (NAME 17620 . 17627) (IF 17635 . 17637) (ELSE 17665 . 17669) (MULT 15253 . 15254) (COMMA 15254 . 15255) (INDENT_BLOCK 13000 . 13098) (NEWLINE 12999 . 13000) (COLON 12998 . 12999) (TRY 12828 . 12831) (AS 12990 . 12992) (INDENT_BLOCK 12700 . 12774) (NEWLINE 12699 . 12700) (COLON 12698 . 12699) (TRY 12544 . 12547) (AS 12690 . 12692)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) for collections, according to PEP 3119.

Unit tests are in test_collections.
\"\"\"" code nil nil [102 214])
            ("abc" include nil nil [216 255])
            ("sys" include nil nil [256 266])
            ("__all__" variable nil nil [268 717])
            ("__name__" variable nil nil [962 990])
            ("bytes_iterator" variable nil nil [1340 1372])
            ("bytearray_iterator" variable nil nil [1373 1417])
            ("dict_keyiterator" variable nil nil [1443 1483])
            ("dict_valueiterator" variable nil nil [1484 1528])
            ("dict_itemiterator" variable nil nil [1529 1571])
            ("list_iterator" variable nil nil [1572 1602])
            ("list_reverseiterator" variable nil nil [1603 1650])
            ("range_iterator" variable nil nil [1651 1688])
            ("longrange_iterator" variable nil nil [1689 1738])
            ("set_iterator" variable nil nil [1739 1771])
            ("str_iterator" variable nil nil [1772 1801])
            ("tuple_iterator" variable nil nil [1802 1833])
            ("zip_iterator" variable nil nil [1834 1866])
            ("dict_keys" variable nil nil [1879 1906])
            ("dict_values" variable nil nil [1907 1938])
            ("dict_items" variable nil nil [1939 1968])
            ("mappingproxy" variable nil nil [1980 2014])
            ("generator" variable nil nil [2015 2052])
            ("_coro" function nil nil [2075 2093])
            ("_coro" variable nil nil [2093 2108])
            ("coroutine" variable nil nil [2109 2132])
            ("_coro" code nil nil [2133 2146])
            ("del" code nil nil [2174 2183])
            ("_ag" function nil nil [2219 2236])
            ("_ag" variable nil nil [2236 2247])
            ("async_generator" variable nil nil [2248 2275])
            ("del" code nil nil [2276 2283])
            ("_check_methods" function (:arguments 
              ( ("C" variable nil (reparse-symbol function_parameters) [2331 2332])
                ("methods" variable nil (reparse-symbol function_parameters) [2334 2342]))              ) nil [2312 2626])
            ("Hashable" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [2667 2681])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2720 2724]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2687 2744])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2787 2790])
                            ("C" variable nil (reparse-symbol function_parameters) [2792 2793]))                          )
                        (reparse-symbol indented_block_body) [2749 2903]))                  
                :type "class")
                nil [2627 2903])
            ("Awaitable" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [2946 2960])
                    ("__await__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3000 3004]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2966 3021])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3064 3067])
                            ("C" variable nil (reparse-symbol function_parameters) [3069 3070]))                          )
                        (reparse-symbol indented_block_body) [3026 3182]))                  
                :type "class")
                nil [2905 3182])
            ("Coroutine" type
               (:superclasses ("Awaitable")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [3217 3231])
                    ("send" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3266 3270])
                            ("value" variable nil (reparse-symbol function_parameters) [3272 3277]))                          
                        :documentation "Send a value into the coroutine.
        Return next yielded value or raise StopIteration.
        ")
                        (reparse-symbol indented_block_body) [3237 3422])
                    ("throw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3457 3461])
                            ("typ" variable nil (reparse-symbol function_parameters) [3463 3466])
                            ("val" variable nil (reparse-symbol function_parameters) [3468 3471])
                            ("tb" variable nil (reparse-symbol function_parameters) [3478 3480]))                          
                        :documentation "Raise an exception in the coroutine.
        Return next yielded value or raise StopIteration.
        ")
                        (reparse-symbol indented_block_body) [3427 3793])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3808 3812]))                          
                        :documentation "Raise GeneratorExit inside coroutine.
        ")
                        (reparse-symbol indented_block_body) [3798 4071])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4114 4117])
                            ("C" variable nil (reparse-symbol function_parameters) [4119 4120]))                          )
                        (reparse-symbol indented_block_body) [4076 4258]))                  
                :type "class")
                nil [3184 4258])
            ("Coroutine" code nil nil [4260 4289])
            ("AsyncIterable" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4337 4351])
                    ("__aiter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4391 4395]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4357 4429])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4472 4475])
                            ("C" variable nil (reparse-symbol function_parameters) [4477 4478]))                          )
                        (reparse-symbol indented_block_body) [4434 4594]))                  
                :type "class")
                nil [4292 4594])
            ("AsyncIterator" type
               (:superclasses ("AsyncIterable")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4637 4651])
                    ("__anext__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4697 4701]))                          
                        :documentation "Return the next item or raise StopAsyncIteration when exhausted.")
                        (reparse-symbol indented_block_body) [4683 4816])
                    ("__aiter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4835 4839]))                          )
                        (reparse-symbol indented_block_body) [4821 4862])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4905 4908])
                            ("C" variable nil (reparse-symbol function_parameters) [4910 4911]))                          )
                        (reparse-symbol indented_block_body) [4867 5040]))                  
                :type "class")
                nil [4596 5040])
            ("AsyncGenerator" type
               (:superclasses ("AsyncIterator")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [5084 5098])
                    ("__anext__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5124 5128]))                          
                        :documentation "Return the next item from the asynchronous generator.
        When exhausted, raise StopAsyncIteration.
        ")
                        (reparse-symbol indented_block_body) [5110 5296])
                    ("asend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5337 5341])
                            ("value" variable nil (reparse-symbol function_parameters) [5343 5348]))                          
                        :documentation "Send a value into the asynchronous generator.
        Return next yielded value or raise StopAsyncIteration.
        ")
                        (reparse-symbol indented_block_body) [5327 5516])
                    ("athrow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5558 5562])
                            ("typ" variable nil (reparse-symbol function_parameters) [5564 5567])
                            ("val" variable nil (reparse-symbol function_parameters) [5569 5572])
                            ("tb" variable nil (reparse-symbol function_parameters) [5579 5581]))                          
                        :documentation "Raise an exception in the asynchronous generator.
        Return next yielded value or raise StopAsyncIteration.
        ")
                        (reparse-symbol indented_block_body) [5547 5912])
                    ("aclose" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5934 5938]))                          
                        :documentation "Raise GeneratorExit inside coroutine.
        ")
                        (reparse-symbol indented_block_body) [5923 6222])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6265 6268])
                            ("C" variable nil (reparse-symbol function_parameters) [6270 6271]))                          )
                        (reparse-symbol indented_block_body) [6227 6464]))                  
                :type "class")
                nil [5042 6464])
            ("AsyncGenerator" code nil nil [6466 6506])
            ("Iterable" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [6549 6563])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6602 6606]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6569 6653])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6696 6699])
                            ("C" variable nil (reparse-symbol function_parameters) [6701 6702]))                          )
                        (reparse-symbol indented_block_body) [6658 6812]))                  
                :type "class")
                nil [6509 6812])
            ("Iterator" type
               (:superclasses ("Iterable")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [6845 6859])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6898 6902]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6865 7019])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7037 7041]))                          )
                        (reparse-symbol indented_block_body) [7024 7064])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7107 7110])
                            ("C" variable nil (reparse-symbol function_parameters) [7112 7113]))                          )
                        (reparse-symbol indented_block_body) [7069 7235]))                  
                :type "class")
                nil [6814 7235])
            ("Iterator" code nil nil [7236 7269])
            ("Iterator" code nil nil [7270 7307])
            ("Iterator" code nil nil [7346 7381])
            ("Iterator" code nil nil [7382 7419])
            ("Iterator" code nil nil [7420 7456])
            ("Iterator" code nil nil [7457 7489])
            ("Iterator" code nil nil [7490 7529])
            ("Iterator" code nil nil [7530 7563])
            ("Iterator" code nil nil [7564 7601])
            ("Iterator" code nil nil [7602 7633])
            ("Iterator" code nil nil [7634 7665])
            ("Iterator" code nil nil [7666 7699])
            ("Iterator" code nil nil [7700 7731])
            ("Reversible" type
               (:superclasses ("Iterable")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [7767 7781])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7824 7828]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7787 7875])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7918 7921])
                            ("C" variable nil (reparse-symbol function_parameters) [7923 7924]))                          )
                        (reparse-symbol indented_block_body) [7880 8052]))                  
                :type "class")
                nil [7734 8052])
            ("Generator" type
               (:superclasses ("Iterator")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [8086 8100])
                    ("__next__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8119 8123]))                          
                        :documentation "Return the next item from the generator.
        When exhausted, raise StopIteration.
        ")
                        (reparse-symbol indented_block_body) [8106 8266])
                    ("send" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8300 8304])
                            ("value" variable nil (reparse-symbol function_parameters) [8306 8311]))                          
                        :documentation "Send a value into the generator.
        Return next yielded value or raise StopIteration.
        ")
                        (reparse-symbol indented_block_body) [8271 8456])
                    ("throw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8491 8495])
                            ("typ" variable nil (reparse-symbol function_parameters) [8497 8500])
                            ("val" variable nil (reparse-symbol function_parameters) [8502 8505])
                            ("tb" variable nil (reparse-symbol function_parameters) [8512 8514]))                          
                        :documentation "Raise an exception in the generator.
        Return next yielded value or raise StopIteration.
        ")
                        (reparse-symbol indented_block_body) [8461 8827])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8842 8846]))                          
                        :documentation "Raise GeneratorExit inside generator.
        ")
                        (reparse-symbol indented_block_body) [8832 9105])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9148 9151])
                            ("C" variable nil (reparse-symbol function_parameters) [9153 9154]))                          )
                        (reparse-symbol indented_block_body) [9110 9337]))                  
                :type "class")
                nil [8054 9337])
            ("Generator" code nil nil [9338 9367])
            ("Sized" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [9407 9421])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9459 9463]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9427 9483])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9526 9529])
                            ("C" variable nil (reparse-symbol function_parameters) [9531 9532]))                          )
                        (reparse-symbol indented_block_body) [9488 9638]))                  
                :type "class")
                nil [9370 9638])
            ("Container" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [9681 9695])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9738 9742])
                            ("x" variable nil (reparse-symbol function_parameters) [9744 9745]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9701 9769])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [9812 9815])
                            ("C" variable nil (reparse-symbol function_parameters) [9817 9818]))                          )
                        (reparse-symbol indented_block_body) [9774 9933]))                  
                :type "class")
                nil [9640 9933])
            ("Collection" type
               (:superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [9985 9999])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [10043 10046])
                            ("C" variable nil (reparse-symbol function_parameters) [10048 10049]))                          )
                        (reparse-symbol indented_block_body) [10005 10189]))                  
                :type "class")
                nil [9934 10189])
            ("Callable" type
               (:superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [10230 10244])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10283 10287])
                            ("args" variable nil (reparse-symbol function_parameters) [10289 10294])
                            ("kwds" variable nil (reparse-symbol function_parameters) [10296 10302]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10250 10326])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [10369 10372])
                            ("C" variable nil (reparse-symbol function_parameters) [10374 10375]))                          )
                        (reparse-symbol indented_block_body) [10331 10485]))                  
                :type "class")
                nil [10190 10485])
            ("Set" type
               (:documentation "A set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__ and __len__.

    To override the comparisons (presumably for speed, as the
    semantics are fixed), redefine __le__ and __ge__,
    then the other operations will automatically follow suit.
    "
                :superclasses ("Collection")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [10888 10902])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10919 10923])
                            ("other" variable nil (reparse-symbol function_parameters) [10925 10930]))                          )
                        (reparse-symbol indented_block_body) [10908 11175])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11191 11195])
                            ("other" variable nil (reparse-symbol function_parameters) [11197 11202]))                          )
                        (reparse-symbol indented_block_body) [11180 11339])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11355 11359])
                            ("other" variable nil (reparse-symbol function_parameters) [11361 11366]))                          )
                        (reparse-symbol indented_block_body) [11344 11503])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11519 11523])
                            ("other" variable nil (reparse-symbol function_parameters) [11525 11530]))                          )
                        (reparse-symbol indented_block_body) [11508 11775])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11791 11795])
                            ("other" variable nil (reparse-symbol function_parameters) [11797 11802]))                          )
                        (reparse-symbol indented_block_body) [11780 11940])
                    ("_from_iterable" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [11981 11984])
                            ("it" variable nil (reparse-symbol function_parameters) [11986 11988]))                          )
                        (reparse-symbol indented_block_body) [11945 12217])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12234 12238])
                            ("other" variable nil (reparse-symbol function_parameters) [12240 12245]))                          )
                        (reparse-symbol indented_block_body) [12222 12404])
                    ("__rand__" variable nil (reparse-symbol indented_block_body) [12409 12427])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12448 12452])
                            ("other" variable nil (reparse-symbol function_parameters) [12454 12459]))                          )
                        (reparse-symbol indented_block_body) [12433 12629])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12645 12649])
                            ("other" variable nil (reparse-symbol function_parameters) [12651 12656]))                          )
                        (reparse-symbol indented_block_body) [12634 12833])
                    ("__ror__" variable nil (reparse-symbol indented_block_body) [12838 12854])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12872 12876])
                            ("other" variable nil (reparse-symbol function_parameters) [12878 12883]))                          )
                        (reparse-symbol indented_block_body) [12860 13175])
                    ("__rsub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13193 13197])
                            ("other" variable nil (reparse-symbol function_parameters) [13199 13204]))                          )
                        (reparse-symbol indented_block_body) [13180 13496])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13513 13517])
                            ("other" variable nil (reparse-symbol function_parameters) [13519 13524]))                          )
                        (reparse-symbol indented_block_body) [13501 13746])
                    ("__rxor__" variable nil (reparse-symbol indented_block_body) [13751 13769])
                    ("_hash" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13785 13789]))                          
                        :documentation "Compute the hash value of a set.

        Note that we don't define __hash__: not all sets are hashable.
        But if you define a hashable set type, its __hash__ should
        call this function.

        This must be compatible __eq__.

        All sets ought to compare equal if they contain the same
        elements, regardless of how they are implemented, and
        regardless of the order of the elements; so there's not much
        freedom for __eq__ or __hash__.  We match the algorithm used
        by the built-in frozenset type.
        ")
                        (reparse-symbol indented_block_body) [13775 14779]))                  
                :type "class")
                nil [10502 14779])
            ("Set" code nil nil [14780 14803])
            ("MutableSet" type
               (:documentation "A mutable set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__, __len__,
    add(), and discard().

    To override the comparisons (presumably for speed, as the
    semantics are fixed), all you have to do is redefine __le__ and
    then the other operations will automatically follow suit.
    "
                :superclasses ("Set")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [15236 15250])
                    ("add" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15284 15288])
                            ("value" variable nil (reparse-symbol function_parameters) [15290 15295]))                          
                        :documentation "Add an element.")
                        (reparse-symbol indented_block_body) [15256 15362])
                    ("discard" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15399 15403])
                            ("value" variable nil (reparse-symbol function_parameters) [15405 15410]))                          
                        :documentation "Remove an element.  Do not raise an exception if absent.")
                        (reparse-symbol indented_block_body) [15367 15518])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15534 15538])
                            ("value" variable nil (reparse-symbol function_parameters) [15540 15545]))                          
                        :documentation "Remove an element. If not a member, raise a KeyError.")
                        (reparse-symbol indented_block_body) [15523 15708])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15721 15725]))                          
                        :documentation "Return the popped value.  Raise KeyError if empty.")
                        (reparse-symbol indented_block_body) [15713 15975])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15990 15994]))                          
                        :documentation "This is slow (creates N new iterators!) but effective.")
                        (reparse-symbol indented_block_body) [15980 16172])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16189 16193])
                            ("it" variable nil (reparse-symbol function_parameters) [16195 16197]))                          )
                        (reparse-symbol indented_block_body) [16177 16273])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16291 16295])
                            ("it" variable nil (reparse-symbol function_parameters) [16297 16299]))                          )
                        (reparse-symbol indented_block_body) [16278 16388])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16406 16410])
                            ("it" variable nil (reparse-symbol function_parameters) [16412 16414]))                          )
                        (reparse-symbol indented_block_body) [16393 16745])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16763 16767])
                            ("it" variable nil (reparse-symbol function_parameters) [16769 16771]))                          )
                        (reparse-symbol indented_block_body) [16750 16921]))                  
                :type "class")
                nil [14806 16921])
            ("MutableSet" code nil nil [16922 16946])
            ("Mapping" type
               (:superclasses ("Collection")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [17000 17014])
                    ("\"\"\"A Mapping is a generic container for associating key/value
    pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __iter__, and __len__.

    \"\"\"" code nil (reparse-symbol indented_block_body) [17020 17225])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17267 17271])
                            ("key" variable nil (reparse-symbol function_parameters) [17273 17276]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17231 17302])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17315 17319])
                            ("key" variable nil (reparse-symbol function_parameters) [17321 17324])
                            ("default" variable nil (reparse-symbol function_parameters) [17326 17333]))                          )
                        (reparse-symbol indented_block_body) [17307 17506])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17528 17532])
                            ("key" variable nil (reparse-symbol function_parameters) [17534 17537]))                          )
                        (reparse-symbol indented_block_body) [17511 17663])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17677 17681]))                          )
                        (reparse-symbol indented_block_body) [17668 17783])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17798 17802]))                          )
                        (reparse-symbol indented_block_body) [17788 17907])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17923 17927]))                          )
                        (reparse-symbol indented_block_body) [17912 18027])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18043 18047])
                            ("other" variable nil (reparse-symbol function_parameters) [18049 18054]))                          )
                        (reparse-symbol indented_block_body) [18032 18191])
                    ("__reversed__" variable nil (reparse-symbol indented_block_body) [18196 18215]))                  
                :type "class")
                nil [16968 18216])
            ("Mapping" code nil nil [18217 18247])
            ("MappingView" type
               (:superclasses ("Sized")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [18281 18304])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [18347 18370]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18323 18327])
                            ("mapping" variable nil (reparse-symbol function_parameters) [18329 18336]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18310 18371])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18388 18392]))                          )
                        (reparse-symbol indented_block_body) [18376 18429])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18447 18451]))                          )
                        (reparse-symbol indented_block_body) [18434 18523]))                  
                :type "class")
                nil [18250 18523])
            ("KeysView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [18564 18578])
                    ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18620 18624])
                            ("it" variable nil (reparse-symbol function_parameters) [18626 18628]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18584 18654])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18676 18680])
                            ("key" variable nil (reparse-symbol function_parameters) [18682 18685]))                          )
                        (reparse-symbol indented_block_body) [18659 18724])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18742 18746]))                          )
                        (reparse-symbol indented_block_body) [18729 18782]))                  
                :type "class")
                nil [18525 18782])
            ("KeysView" code nil nil [18783 18811])
            ("ItemsView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [18854 18868])
                    ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18910 18914])
                            ("it" variable nil (reparse-symbol function_parameters) [18916 18918]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18874 18944])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18966 18970])
                            ("item" variable nil (reparse-symbol function_parameters) [18972 18976]))                          )
                        (reparse-symbol indented_block_body) [18949 19161])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19179 19183]))                          )
                        (reparse-symbol indented_block_body) [19166 19264]))                  
                :type "class")
                nil [18814 19264])
            ("ItemsView" code nil nil [19265 19295])
            ("ValuesView" type
               (:superclasses ("MappingView" "Collection")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [19346 19360])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19383 19387])
                            ("value" variable nil (reparse-symbol function_parameters) [19389 19394]))                          )
                        (reparse-symbol indented_block_body) [19366 19556])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19574 19578]))                          )
                        (reparse-symbol indented_block_body) [19561 19652]))                  
                :type "class")
                nil [19298 19652])
            ("ValuesView" code nil nil [19653 19685])
            ("MutableMapping" type
               (:superclasses ("Mapping")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [19724 19738])
                    ("\"\"\"A MutableMapping is a generic container for associating
    key/value pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __setitem__, __delitem__,
    __iter__, and __len__.

    \"\"\"" code nil (reparse-symbol indented_block_body) [19744 19986])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20028 20032])
                            ("key" variable nil (reparse-symbol function_parameters) [20034 20037])
                            ("value" variable nil (reparse-symbol function_parameters) [20039 20044]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [19992 20070])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20111 20115])
                            ("key" variable nil (reparse-symbol function_parameters) [20117 20120]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [20075 20146])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [20151 20170])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20184 20188])
                            ("key" variable nil (reparse-symbol function_parameters) [20190 20193])
                            ("default" variable nil (reparse-symbol function_parameters) [20195 20202]))                          )
                        (reparse-symbol indented_block_body) [20176 20621])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20638 20642]))                          )
                        (reparse-symbol indented_block_body) [20626 20980])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20995 20999]))                          )
                        (reparse-symbol indented_block_body) [20985 21167])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21183 21187])
                            ("other" variable nil (reparse-symbol function_parameters) [21189 21194])
                            ("kwds" variable nil (reparse-symbol function_parameters) [21202 21208]))                          )
                        (reparse-symbol indented_block_body) [21172 21933])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21953 21957])
                            ("key" variable nil (reparse-symbol function_parameters) [21959 21962])
                            ("default" variable nil (reparse-symbol function_parameters) [21964 21971]))                          )
                        (reparse-symbol indented_block_body) [21938 22176]))                  
                :type "class")
                nil [19688 22176])
            ("MutableMapping" code nil nil [22177 22206])
            ("Sequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must override __new__ or __init__,
    __getitem__, and __len__.
    "
                :superclasses ("Reversible" "Collection")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [22424 22438])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22480 22484])
                            ("index" variable nil (reparse-symbol function_parameters) [22486 22491]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22444 22519])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22537 22541]))                          )
                        (reparse-symbol indented_block_body) [22524 22716])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22738 22742])
                            ("value" variable nil (reparse-symbol function_parameters) [22744 22749]))                          )
                        (reparse-symbol indented_block_body) [22721 22865])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22887 22891]))                          )
                        (reparse-symbol indented_block_body) [22870 22965])
                    ("index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22980 22984])
                            ("value" variable nil (reparse-symbol function_parameters) [22986 22991])
                            ("start" variable nil (reparse-symbol function_parameters) [22993 22998])
                            ("stop" variable nil (reparse-symbol function_parameters) [23002 23006]))                          )
                        (reparse-symbol indented_block_body) [22970 23696])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23711 23715])
                            ("value" variable nil (reparse-symbol function_parameters) [23717 23722]))                          )
                        (reparse-symbol indented_block_body) [23701 23866]))                  
                :type "class")
                nil [22229 23866])
            ("Sequence" code nil nil [23867 23891])
            ("Sequence" code nil nil [23892 23914])
            ("Sequence" code nil nil [23915 23939])
            ("Sequence" code nil nil [23940 23969])
            ("ByteString" type
               (:documentation "This unifies bytes and bytearray.

    XXX Should add all their methods.
    "
                :superclasses ("Sequence")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [24094 24108]))                  
                :type "class")
                nil [23972 24109])
            ("ByteString" code nil nil [24110 24136])
            ("ByteString" code nil nil [24137 24167])
            ("MutableSequence" type
               (:superclasses ("Sequence")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [24208 24222])
                    ("\"\"\"All the operations on a read-write sequence.

    Concrete subclasses must provide __new__ or __init__,
    __getitem__, __setitem__, __delitem__, __len__, and insert().

    \"\"\"" code nil (reparse-symbol indented_block_body) [24228 24409])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24451 24455])
                            ("index" variable nil (reparse-symbol function_parameters) [24457 24462])
                            ("value" variable nil (reparse-symbol function_parameters) [24464 24469]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24415 24497])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24538 24542])
                            ("index" variable nil (reparse-symbol function_parameters) [24544 24549]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24502 24577])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24613 24617])
                            ("index" variable nil (reparse-symbol function_parameters) [24619 24624])
                            ("value" variable nil (reparse-symbol function_parameters) [24626 24631]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24582 24721])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24737 24741])
                            ("value" variable nil (reparse-symbol function_parameters) [24743 24748]))                          )
                        (reparse-symbol indented_block_body) [24726 24858])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24873 24877]))                          )
                        (reparse-symbol indented_block_body) [24863 25043])
                    ("reverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25060 25064]))                          )
                        (reparse-symbol indented_block_body) [25048 25219])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25235 25239])
                            ("values" variable nil (reparse-symbol function_parameters) [25241 25247]))                          )
                        (reparse-symbol indented_block_body) [25224 25451])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25464 25468])
                            ("index" variable nil (reparse-symbol function_parameters) [25470 25475]))                          )
                        (reparse-symbol indented_block_body) [25456 25714])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25730 25734])
                            ("value" variable nil (reparse-symbol function_parameters) [25736 25741]))                          )
                        (reparse-symbol indented_block_body) [25719 25913])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25931 25935])
                            ("values" variable nil (reparse-symbol function_parameters) [25937 25943]))                          )
                        (reparse-symbol indented_block_body) [25918 25994]))                  
                :type "class")
                nil [24170 25994])
            ("MutableSequence" code nil nil [25995 26025])
            ("MutableSequence" code nil nil [26026 26061]))          
      :file "_collections_abc.py"
      :pointmax 26101
      :fsize 26100
      :lastmodtime '(24336 23930 0 0)
      :unmatched-syntax '((COMMA 21200 . 21201) (DIV 21199 . 21200) (RAISE 20881 . 20886) (FROM 20896 . 20900) (NEWLINE 20905 . 20906) (YIELD 18757 . 18762) (FROM 18763 . 18767) (NEWLINE 18781 . 18782) (RAISE 15901 . 15906) (FROM 15916 . 15920) (NEWLINE 15925 . 15926) (NAME 10205 . 10214) (ASSIGN 10214 . 10215) (NAME 9656 . 9665) (ASSIGN 9665 . 9666) (NAME 9382 . 9391) (ASSIGN 9391 . 9392) (NAME 6524 . 6533) (ASSIGN 6533 . 6534) (NAME 4312 . 4321) (ASSIGN 4321 . 4322) (NAME 2921 . 2930) (ASSIGN 2930 . 2931) (NAME 2642 . 2651) (ASSIGN 2651 . 2652)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Bisection algorithms.\"\"\"" code nil nil [1 28])
            ("insort_right" function
               (:documentation "Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the right of the rightmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [47 48])
                    ("x" variable nil (reparse-symbol function_parameters) [50 51])
                    ("lo" variable nil (reparse-symbol function_parameters) [53 55])
                    ("hi" variable nil (reparse-symbol function_parameters) [59 61]))                  )
                nil [30 376])
            ("bisect_right" function
               (:documentation "Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e <= x, and all e in
    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will
    insert just after the rightmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [394 395])
                    ("x" variable nil (reparse-symbol function_parameters) [397 398])
                    ("lo" variable nil (reparse-symbol function_parameters) [400 402])
                    ("hi" variable nil (reparse-symbol function_parameters) [406 408]))                  )
                nil [377 1033])
            ("insort_left" function
               (:documentation "Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the left of the leftmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1050 1051])
                    ("x" variable nil (reparse-symbol function_parameters) [1053 1054])
                    ("lo" variable nil (reparse-symbol function_parameters) [1056 1058])
                    ("hi" variable nil (reparse-symbol function_parameters) [1062 1064]))                  )
                nil [1034 1376])
            ("bisect_left" function
               (:documentation "Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e < x, and all e in
    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will
    insert just before the leftmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1394 1395])
                    ("x" variable nil (reparse-symbol function_parameters) [1397 1398])
                    ("lo" variable nil (reparse-symbol function_parameters) [1400 1402])
                    ("hi" variable nil (reparse-symbol function_parameters) [1406 1408]))                  )
                nil [1378 2033])
            ("try" code nil nil [2093 2153])
            ("bisect" variable nil nil [2171 2192])
            ("insort" variable nil nil [2193 2214]))          
      :file "bisect.py"
      :pointmax 2215
      :fsize 2214
      :lastmodtime '(24336 23930 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) according to PEP 3119.\"\"\"" code nil nil [102 159])
            ("abstractmethod" function
               (:documentation "A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.  abstractmethod() may be used to declare
    abstract methods for properties and descriptors.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    "
                :arguments 
                  ( ("funcobj" variable nil (reparse-symbol function_parameters) [181 188]))                  )
                nil [162 833])
            ("abstractclassmethod" type
               (:documentation "A decorator indicating abstract classmethods.

    Deprecated, use 'classmethod' with 'abstractmethod' instead.
    "
                :superclasses ("classmethod")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1007 1034])
                    ("__init__" function
                       (:suite 
                          ( ("callable" variable nil (reparse-symbol indented_block_body) [1078 1114])
                            ("super" code nil (reparse-symbol indented_block_body) [1123 1149]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1053 1057])
                            ("callable" variable nil (reparse-symbol function_parameters) [1059 1067]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1040 1150]))                  
                :type "class")
                nil [835 1150])
            ("abstractstaticmethod" type
               (:documentation "A decorator indicating abstract staticmethods.

    Deprecated, use 'staticmethod' with 'abstractmethod' instead.
    "
                :superclasses ("staticmethod")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1328 1355])
                    ("__init__" function
                       (:suite 
                          ( ("callable" variable nil (reparse-symbol indented_block_body) [1399 1435])
                            ("super" code nil (reparse-symbol indented_block_body) [1444 1470]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1374 1378])
                            ("callable" variable nil (reparse-symbol function_parameters) [1380 1388]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1361 1471]))                  
                :type "class")
                nil [1152 1471])
            ("abstractproperty" type
               (:documentation "A decorator indicating abstract properties.

    Deprecated, use 'property' with 'abstractmethod' instead.
    "
                :superclasses ("property")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1634 1661]))                  
                :type "class")
                nil [1473 1662])
            ("try" code nil nil [1664 4342])
            ("ABC" type
               (:documentation "Helper class that provides a standard way to create an ABC using
    inheritance.
    "
                :superclasses ("ABCMeta")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4475 4489]))                  
                :type "class")
                nil [4344 4490]))          
      :file "abc.py"
      :pointmax 4490
      :fsize 4489
      :lastmodtime '(24336 23930 0 0)
      :unmatched-syntax '((NAME 4354 . 4363) (ASSIGN 4363 . 4364)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Constants/functions for interpreting results of os.stat() and os.lstat().

Suggested usage: from stat import *
\"\"\"" code nil nil [1 118])
            ("ST_MODE" variable nil nil [190 202])
            ("ST_INO" variable nil nil [203 215])
            ("ST_DEV" variable nil nil [216 228])
            ("ST_NLINK" variable nil nil [229 241])
            ("ST_UID" variable nil nil [242 254])
            ("ST_GID" variable nil nil [255 267])
            ("ST_SIZE" variable nil nil [268 280])
            ("ST_ATIME" variable nil nil [281 293])
            ("ST_MTIME" variable nil nil [294 306])
            ("ST_CTIME" variable nil nil [307 319])
            ("S_IMODE" function
               (:documentation "Return the portion of the file's mode that can be set by
    os.chmod().
    "
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [363 367]))                  )
                nil [351 483])
            ("S_IFMT" function
               (:documentation "Return the portion of the file's mode that describes the
    file type.
    "
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [495 499]))                  )
                nil [484 616])
            ("S_IFDIR" variable nil nil [713 732])
            ("S_IFCHR" variable nil nil [746 765])
            ("S_IFBLK" variable nil nil [786 805])
            ("S_IFREG" variable nil nil [822 841])
            ("S_IFIFO" variable nil nil [858 877])
            ("S_IFLNK" variable nil nil [899 918])
            ("S_IFSOCK" variable nil nil [936 955])
            ("S_IFDOOR" variable nil nil [1024 1036])
            ("S_IFPORT" variable nil nil [1037 1049])
            ("S_IFWHT" variable nil nil [1050 1061])
            ("S_ISDIR" function
               (:documentation "Return True if mode is from a directory."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1115 1119]))                  )
                nil [1103 1208])
            ("S_ISCHR" function
               (:documentation "Return True if mode is from a character special device file."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1221 1225]))                  )
                nil [1209 1334])
            ("S_ISBLK" function
               (:documentation "Return True if mode is from a block special device file."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1347 1351]))                  )
                nil [1335 1456])
            ("S_ISREG" function
               (:documentation "Return True if mode is from a regular file."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1469 1473]))                  )
                nil [1457 1565])
            ("S_ISFIFO" function
               (:documentation "Return True if mode is from a FIFO (named pipe)."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1579 1583]))                  )
                nil [1566 1680])
            ("S_ISLNK" function
               (:documentation "Return True if mode is from a symbolic link."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1693 1697]))                  )
                nil [1681 1790])
            ("S_ISSOCK" function
               (:documentation "Return True if mode is from a socket."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1804 1808]))                  )
                nil [1791 1895])
            ("S_ISDOOR" function
               (:documentation "Return True if mode is from a door."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1909 1913]))                  )
                nil [1896 1979])
            ("S_ISPORT" function
               (:documentation "Return True if mode is from an event port."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [1993 1997]))                  )
                nil [1980 2070])
            ("S_ISWHT" function
               (:documentation "Return True if mode is from a whiteout."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [2083 2087]))                  )
                nil [2071 2157])
            ("S_ISUID" variable nil nil [2187 2203])
            ("S_ISGID" variable nil nil [2219 2235])
            ("S_ENFMT" variable nil nil [2251 2268])
            ("S_ISVTX" variable nil nil [2296 2312])
            ("S_IREAD" variable nil nil [2327 2343])
            ("S_IWRITE" variable nil nil [2375 2392])
            ("S_IEXEC" variable nil nil [2423 2439])
            ("S_IRWXU" variable nil nil [2471 2487])
            ("S_IRUSR" variable nil nil [2518 2534])
            ("S_IWUSR" variable nil nil [2552 2568])
            ("S_IXUSR" variable nil nil [2587 2603])
            ("S_IRWXG" variable nil nil [2624 2640])
            ("S_IRGRP" variable nil nil [2671 2687])
            ("S_IWGRP" variable nil nil [2705 2721])
            ("S_IXGRP" variable nil nil [2740 2756])
            ("S_IRWXO" variable nil nil [2777 2793])
            ("S_IROTH" variable nil nil [2840 2856])
            ("S_IWOTH" variable nil nil [2875 2891])
            ("S_IXOTH" variable nil nil [2911 2927])
            ("UF_NODUMP" variable nil nil [2974 2999])
            ("UF_IMMUTABLE" variable nil nil [3020 3045])
            ("UF_APPEND" variable nil nil [3073 3098])
            ("UF_OPAQUE" variable nil nil [3131 3156])
            ("UF_NOUNLINK" variable nil nil [3214 3239])
            ("UF_COMPRESSED" variable nil nil [3278 3304])
            ("UF_HIDDEN" variable nil nil [3336 3361])
            ("SF_ARCHIVED" variable nil nil [3400 3425])
            ("SF_IMMUTABLE" variable nil nil [3450 3475])
            ("SF_APPEND" variable nil nil [3503 3528])
            ("SF_NOUNLINK" variable nil nil [3561 3586])
            ("SF_SNAPSHOT" variable nil nil [3625 3650])
            ("_filemode_table" variable nil nil [3680 4422])
            ("filemode" function
               (:documentation "Convert a file's mode to a string of the form '-rwxrwxrwx'."
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [4437 4441]))                  )
                nil [4424 4752])
            ("FILE_ATTRIBUTE_ARCHIVE" variable nil nil [4849 4876])
            ("FILE_ATTRIBUTE_COMPRESSED" variable nil nil [4877 4909])
            ("FILE_ATTRIBUTE_DEVICE" variable nil nil [4910 4936])
            ("FILE_ATTRIBUTE_DIRECTORY" variable nil nil [4937 4966])
            ("FILE_ATTRIBUTE_ENCRYPTED" variable nil nil [4967 4999])
            ("FILE_ATTRIBUTE_HIDDEN" variable nil nil [5000 5025])
            ("FILE_ATTRIBUTE_INTEGRITY_STREAM" variable nil nil [5026 5065])
            ("FILE_ATTRIBUTE_NORMAL" variable nil nil [5066 5093])
            ("FILE_ATTRIBUTE_NOT_CONTENT_INDEXED" variable nil nil [5094 5135])
            ("FILE_ATTRIBUTE_NO_SCRUB_DATA" variable nil nil [5136 5173])
            ("FILE_ATTRIBUTE_OFFLINE" variable nil nil [5174 5203])
            ("FILE_ATTRIBUTE_READONLY" variable nil nil [5204 5231])
            ("FILE_ATTRIBUTE_REPARSE_POINT" variable nil nil [5232 5267])
            ("FILE_ATTRIBUTE_SPARSE_FILE" variable nil nil [5268 5300])
            ("FILE_ATTRIBUTE_SYSTEM" variable nil nil [5301 5326])
            ("FILE_ATTRIBUTE_TEMPORARY" variable nil nil [5327 5357])
            ("FILE_ATTRIBUTE_VIRTUAL" variable nil nil [5358 5388])
            ("try" code nil nil [5428 5486]))          
      :file "stat.py"
      :pointmax 5486
      :fsize 5485
      :lastmodtime '(24336 23930 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("'''A multi-producer, multi-consumer queue.'''" code nil nil [1 46])
            ("threading" include nil nil [48 64])
            ("collections" include nil nil [65 94])
            ("heapq" include nil nil [95 130])
            ("time" include nil nil [131 165])
            ("try" code nil nil [166 249])
            ("__all__" variable nil nil [250 331])
            ("try" code nil nil [334 492])
            ("Full" type
               (:superclasses ("Exception")
                :members 
                  ( ("'Exception raised by Queue.put(block=0)/put_nowait().'" code nil (reparse-symbol indented_block_body) [520 574])
                    ("pass" code nil (reparse-symbol indented_block_body) [579 583]))                  
                :type "class")
                nil [493 584])
            ("Queue" type
               (:members 
                  ( ("'''Create a queue object with a given maximum size.

    If maxsize is <= 0, the queue size is infinite.
    '''" code nil (reparse-symbol indented_block_body) [603 715])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [760 782])
                            ("self" code nil (reparse-symbol indented_block_body) [791 810])
                            ("self" variable nil (reparse-symbol indented_block_body) [1100 1129])
                            ("self" variable nil (reparse-symbol indented_block_body) [1258 1306])
                            ("self" variable nil (reparse-symbol indented_block_body) [1438 1485])
                            ("self" variable nil (reparse-symbol indented_block_body) [1639 1692])
                            ("self" variable nil (reparse-symbol indented_block_body) [1701 1726]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [734 738])
                            ("maxsize" variable nil (reparse-symbol function_parameters) [740 747]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [721 1727])
                    ("task_done" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1746 1750]))                          )
                        (reparse-symbol indented_block_body) [1732 2648])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2662 2666]))                          )
                        (reparse-symbol indented_block_body) [2653 3189])
                    ("qsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3204 3208]))                          )
                        (reparse-symbol indented_block_body) [3194 3341])
                    ("empty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3356 3360]))                          )
                        (reparse-symbol indented_block_body) [3346 3917])
                    ("full" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3931 3935]))                          )
                        (reparse-symbol indented_block_body) [3922 4366])
                    ("put" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4379 4383])
                            ("item" variable nil (reparse-symbol function_parameters) [4385 4389])
                            ("block" variable nil (reparse-symbol function_parameters) [4391 4396])
                            ("timeout" variable nil (reparse-symbol function_parameters) [4403 4410]))                          )
                        (reparse-symbol indented_block_body) [4371 5817])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5830 5834])
                            ("block" variable nil (reparse-symbol function_parameters) [5836 5841])
                            ("timeout" variable nil (reparse-symbol function_parameters) [5848 5855]))                          )
                        (reparse-symbol indented_block_body) [5822 7114])
                    ("put_nowait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7134 7138])
                            ("item" variable nil (reparse-symbol function_parameters) [7140 7144]))                          )
                        (reparse-symbol indented_block_body) [7119 7374])
                    ("get_nowait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7394 7398]))                          )
                        (reparse-symbol indented_block_body) [7379 7624])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7848 7852])
                            ("maxsize" variable nil (reparse-symbol function_parameters) [7854 7861]))                          )
                        (reparse-symbol indented_block_body) [7838 7893])
                    ("_qsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7909 7913]))                          )
                        (reparse-symbol indented_block_body) [7898 7947])
                    ("_put" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7995 7999])
                            ("item" variable nil (reparse-symbol function_parameters) [8001 8005]))                          )
                        (reparse-symbol indented_block_body) [7986 8040])
                    ("_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8087 8091]))                          )
                        (reparse-symbol indented_block_body) [8078 8130]))                  
                :type "class")
                nil [586 8130])
            ("PriorityQueue" type
               (:superclasses ("Queue")
                :members 
                  ( ("'''Variant of Queue that retrieves open entries in priority order (lowest first).

    Entries are typically tuples of the form:  (priority number, data).
    '''" code nil (reparse-symbol indented_block_body) [8164 8326])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8342 8346])
                            ("maxsize" variable nil (reparse-symbol function_parameters) [8348 8355]))                          )
                        (reparse-symbol indented_block_body) [8332 8382])
                    ("_qsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8398 8402]))                          )
                        (reparse-symbol indented_block_body) [8387 8436])
                    ("_put" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8450 8454])
                            ("item" variable nil (reparse-symbol function_parameters) [8456 8460]))                          )
                        (reparse-symbol indented_block_body) [8441 8498])
                    ("_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8512 8516]))                          )
                        (reparse-symbol indented_block_body) [8503 8554]))                  
                :type "class")
                nil [8132 8554])
            ("LifoQueue" type
               (:superclasses ("Queue")
                :members 
                  ( ("'''Variant of Queue that retrieves most recently added entries first.'''" code nil (reparse-symbol indented_block_body) [8584 8656])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8672 8676])
                            ("maxsize" variable nil (reparse-symbol function_parameters) [8678 8685]))                          )
                        (reparse-symbol indented_block_body) [8662 8712])
                    ("_qsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8728 8732]))                          )
                        (reparse-symbol indented_block_body) [8717 8766])
                    ("_put" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8780 8784])
                            ("item" variable nil (reparse-symbol function_parameters) [8786 8790]))                          )
                        (reparse-symbol indented_block_body) [8771 8825])
                    ("_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8839 8843]))                          )
                        (reparse-symbol indented_block_body) [8830 8878]))                  
                :type "class")
                nil [8556 8878])
            ("_PySimpleQueue" type
               (:members 
                  ( ("'''Simple, unbounded FIFO queue.

    This pure Python implementation is not reentrant.
    '''" code nil (reparse-symbol indented_block_body) [8906 9001])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9309 9330])
                            ("self" variable nil (reparse-symbol indented_block_body) [9339 9375]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9294 9298]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9281 9376])
                    ("put" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9389 9393])
                            ("item" variable nil (reparse-symbol function_parameters) [9395 9399])
                            ("block" variable nil (reparse-symbol function_parameters) [9401 9406])
                            ("timeout" variable nil (reparse-symbol function_parameters) [9413 9420]))                          )
                        (reparse-symbol indented_block_body) [9381 9704])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9717 9721])
                            ("block" variable nil (reparse-symbol function_parameters) [9723 9728])
                            ("timeout" variable nil (reparse-symbol function_parameters) [9735 9742]))                          )
                        (reparse-symbol indented_block_body) [9709 10517])
                    ("put_nowait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10537 10541])
                            ("item" variable nil (reparse-symbol function_parameters) [10543 10547]))                          )
                        (reparse-symbol indented_block_body) [10522 10781])
                    ("get_nowait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10801 10805]))                          )
                        (reparse-symbol indented_block_body) [10786 11031])
                    ("empty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11046 11050]))                          )
                        (reparse-symbol indented_block_body) [11036 11172])
                    ("qsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11187 11191]))                          )
                        (reparse-symbol indented_block_body) [11177 11298]))                  
                :type "class")
                nil [8880 11298])
            ("if" code nil nil [11300 11357]))          
      :file "queue.py"
      :pointmax 11357
      :fsize 11356
      :lastmodtime '(24336 23930 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Thread module emulating a subset of Java's threading model.\"\"\"" code nil nil [1 66])
            ("os" include nil nil [68 84])
            ("sys" include nil nil [85 103])
            ("_thread" include nil nil [104 118])
            ("time" include nil nil [120 155])
            ("_weakrefset" include nil nil [156 187])
            ("itertools" include nil nil [188 244])
            ("try" code nil nil [245 359])
            ("__all__" variable nil nil [873 1248])
            ("_start_new_thread" variable nil nil [1307 1351])
            ("_allocate_lock" variable nil nil [1352 1390])
            ("_set_sentinel" variable nil nil [1391 1428])
            ("get_ident" variable nil nil [1429 1458])
            ("try" code nil nil [1459 1634])
            ("ThreadError" variable nil nil [1634 1661])
            ("try" code nil nil [1662 1737])
            ("TIMEOUT_MAX" variable nil nil [1737 1770])
            ("del" code nil nil [1771 1782])
            ("_profile_hook" variable nil nil [1824 1844])
            ("_trace_hook" variable nil nil [1845 1863])
            ("setprofile" function
               (:documentation "Set a profile function for all threads started from the threading module.

    The func will be passed to sys.setprofile() for each thread, before its
    run() method is called.

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [1880 1884]))                  )
                nil [1865 2132])
            ("settrace" function
               (:documentation "Set a trace function for all threads started from the threading module.

    The func will be passed to sys.settrace() for each thread, before its run()
    method is called.

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [2146 2150]))                  )
                nil [2133 2390])
            ("Lock" variable nil nil [2418 2439])
            ("RLock" function
               (:documentation "Factory function that returns a new reentrant lock.

    A reentrant lock must be released by the thread that acquired it. Once a
    thread has acquired a reentrant lock, the same thread may acquire it again
    without blocking; the thread must release it once for each time it has
    acquired it.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [2451 2456])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [2458 2466]))                  )
                nil [2441 2887])
            ("_RLock" type
               (:documentation "This class implements reentrant lock objects.

    A reentrant lock must be released by the thread that acquired it. Once a
    thread has acquired a reentrant lock, the same thread may acquire it
    again without blocking; the thread must release it once for each time it
    has acquired it.

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3246 3276])
                            ("self" variable nil (reparse-symbol indented_block_body) [3285 3303])
                            ("self" variable nil (reparse-symbol indented_block_body) [3312 3327]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3231 3235]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3218 3328])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3346 3350]))                          )
                        (reparse-symbol indented_block_body) [3333 3761])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3778 3782])
                            ("blocking" variable nil (reparse-symbol function_parameters) [3784 3792])
                            ("timeout" variable nil (reparse-symbol function_parameters) [3799 3806]))                          
                        :documentation "Acquire a lock, blocking or non-blocking.

        When invoked without arguments: if this thread already owns the lock,
        increment the recursion level by one, and return immediately. Otherwise,
        if another thread owns the lock, block until the lock is unlocked. Once
        the lock is unlocked (not owned by any thread), then grab ownership, set
        the recursion level to one, and return. If more than one thread is
        blocked waiting until the lock is unlocked, only one at a time will be
        able to grab ownership of the lock. There is no return value in this
        case.

        When invoked with the blocking argument set to true, do the same thing
        as when called without arguments, and return true.

        When invoked with the blocking argument set to false, do not block. If a
        call without an argument would block, return false immediately;
        otherwise, do the same thing as when called without arguments, and
        return true.

        When invoked with the floating-point timeout argument set to a positive
        value, block for at most the number of seconds specified by timeout
        and as long as the lock cannot be acquired.  Return true if the lock has
        been acquired, false if the timeout has elapsed.

        ")
                        (reparse-symbol indented_block_body) [3766 5375])
                    ("__enter__" variable nil (reparse-symbol indented_block_body) [5380 5399])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5417 5421]))                          
                        :documentation "Release a lock, decrementing the recursion level.

        If after the decrement it is zero, reset the lock to unlocked (not owned
        by any thread), and if any other threads are blocked waiting for the
        lock to become unlocked, allow exactly one of them to proceed. If after
        the decrement the recursion level is still nonzero, the lock remains
        locked and owned by the calling thread.

        Only call this method when the calling thread owns the lock. A
        RuntimeError is raised if this method is called when the lock is
        unlocked.

        There is no return value.

        ")
                        (reparse-symbol indented_block_body) [5405 6298])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6316 6320])
                            ("t" variable nil (reparse-symbol function_parameters) [6322 6323])
                            ("v" variable nil (reparse-symbol function_parameters) [6325 6326])
                            ("tb" variable nil (reparse-symbol function_parameters) [6328 6330]))                          )
                        (reparse-symbol indented_block_body) [6303 6356])
                    ("_acquire_restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6434 6438])
                            ("state" variable nil (reparse-symbol function_parameters) [6440 6445]))                          )
                        (reparse-symbol indented_block_body) [6413 6519])
                    ("_release_save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6542 6546]))                          )
                        (reparse-symbol indented_block_body) [6524 6811])
                    ("_is_owned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6830 6834]))                          )
                        (reparse-symbol indented_block_body) [6816 6879]))                  
                :type "class")
                nil [2888 6879])
            ("_PyRLock" variable nil nil [6880 6897])
            ("Condition" type
               (:documentation "Class that implements a condition variable.

    A condition variable allows one or more threads to wait until they are
    notified by another thread.

    If the lock argument is given and not None, it must be a Lock or RLock
    object, and it is used as the underlying lock. Otherwise, a new RLock object
    is created and used as the underlying lock.

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [7334 7378])
                            ("self" variable nil (reparse-symbol indented_block_body) [7386 7403])
                            ("self" variable nil (reparse-symbol indented_block_body) [7472 7499])
                            ("self" variable nil (reparse-symbol indented_block_body) [7508 7535])
                            ("try" code nil (reparse-symbol indented_block_body) [7759 7864])
                            ("try" code nil (reparse-symbol indented_block_body) [7872 7983])
                            ("try" code nil (reparse-symbol indented_block_body) [7991 8088])
                            ("self" variable nil (reparse-symbol indented_block_body) [8096 8120]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7308 7312])
                            ("lock" variable nil (reparse-symbol function_parameters) [7314 7318]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7295 8121])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8140 8144]))                          )
                        (reparse-symbol indented_block_body) [8126 8185])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8203 8207])
                            ("args" variable nil (reparse-symbol function_parameters) [8209 8214]))                          )
                        (reparse-symbol indented_block_body) [8190 8259])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8277 8281]))                          )
                        (reparse-symbol indented_block_body) [8264 8356])
                    ("_release_save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8379 8383]))                          )
                        (reparse-symbol indented_block_body) [8361 8444])
                    ("_acquire_restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8470 8474])
                            ("x" variable nil (reparse-symbol function_parameters) [8476 8477]))                          )
                        (reparse-symbol indented_block_body) [8449 8540])
                    ("_is_owned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8559 8563]))                          )
                        (reparse-symbol indented_block_body) [8545 8826])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8840 8844])
                            ("timeout" variable nil (reparse-symbol function_parameters) [8846 8853]))                          
                        :documentation "Wait until notified or until a timeout occurs.

        If the calling thread has not acquired the lock when this method is
        called, a RuntimeError is raised.

        This method releases the underlying lock, and then blocks until it is
        awakened by a notify() or notify_all() call for the same condition
        variable in another thread, or until the optional timeout occurs. Once
        awakened or timed out, it re-acquires the lock and returns.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof).

        When the underlying lock is an RLock, it is not released using its
        release() method, since this may not actually unlock the lock when it
        was acquired multiple times recursively. Instead, an internal interface
        of the RLock class is used, which really unlocks it even when it has
        been recursively acquired several times. Another internal interface is
        then used to restore the recursion level when the lock is reacquired.

        ")
                        (reparse-symbol indented_block_body) [8831 10859])
                    ("wait_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10877 10881])
                            ("predicate" variable nil (reparse-symbol function_parameters) [10883 10892])
                            ("timeout" variable nil (reparse-symbol function_parameters) [10894 10901]))                          
                        :documentation "Wait until a condition evaluates to True.

        predicate should be a callable which result will be interpreted as a
        boolean value.  A timeout may be provided giving the maximum time to
        wait.

        ")
                        (reparse-symbol indented_block_body) [10864 11597])
                    ("notify" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11613 11617])
                            ("n" variable nil (reparse-symbol function_parameters) [11619 11620]))                          
                        :documentation "Wake up one or more threads waiting on this condition, if any.

        If the calling thread has not acquired the lock when this method is
        called, a RuntimeError is raised.

        This method wakes up at most n of the threads waiting for the condition
        variable; it is a no-op if no threads are waiting.

        ")
                        (reparse-symbol indented_block_body) [11602 12403])
                    ("notify_all" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12423 12427]))                          
                        :documentation "Wake up all threads waiting on this condition.

        If the calling thread has not acquired the lock when this method
        is called, a RuntimeError is raised.

        ")
                        (reparse-symbol indented_block_body) [12408 12660])
                    ("notifyAll" variable nil (reparse-symbol indented_block_body) [12665 12687]))                  
                :type "class")
                nil [6900 12688])
            ("Semaphore" type
               (:documentation "This class implements semaphore objects.

    Semaphores manage a counter representing the number of release() calls minus
    the number of acquire() calls, plus an initial value. The acquire() method
    blocks if necessary until it can return without making the counter
    negative. If not given, value defaults to 1.

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [13165 13248])
                            ("self" variable nil (reparse-symbol indented_block_body) [13256 13286])
                            ("self" variable nil (reparse-symbol indented_block_body) [13295 13314]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13141 13145])
                            ("value" variable nil (reparse-symbol function_parameters) [13147 13152]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13128 13315])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13332 13336])
                            ("blocking" variable nil (reparse-symbol function_parameters) [13338 13346])
                            ("timeout" variable nil (reparse-symbol function_parameters) [13353 13360]))                          
                        :documentation "Acquire a semaphore, decrementing the internal counter by one.

        When invoked without arguments: if the internal counter is larger than
        zero on entry, decrement it by one and return immediately. If it is zero
        on entry, block, waiting until some other thread has called release() to
        make it larger than zero. This is done with proper interlocking so that
        if multiple acquire() calls are blocked, release() will wake exactly one
        of them up. The implementation may pick one at random, so the order in
        which blocked threads are awakened should not be relied on. There is no
        return value in this case.

        When invoked with blocking set to true, do the same thing as when called
        without arguments, and return true.

        When invoked with blocking set to false, do not block. If a call without
        an argument would block, return false immediately; otherwise, do the
        same thing as when called without arguments, and return true.

        When invoked with a timeout other than None, it will block for at
        most timeout seconds.  If acquire does not complete successfully in
        that interval, return false.  Return true otherwise.

        ")
                        (reparse-symbol indented_block_body) [13320 15330])
                    ("__enter__" variable nil (reparse-symbol indented_block_body) [15335 15354])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15372 15376]))                          
                        :documentation "Release a semaphore, incrementing the internal counter by one.

        When the counter is zero on entry and another thread is waiting for it
        to become larger than zero again, wake up that thread.

        ")
                        (reparse-symbol indented_block_body) [15360 15695])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15713 15717])
                            ("t" variable nil (reparse-symbol function_parameters) [15719 15720])
                            ("v" variable nil (reparse-symbol function_parameters) [15722 15723])
                            ("tb" variable nil (reparse-symbol function_parameters) [15725 15727]))                          )
                        (reparse-symbol indented_block_body) [15700 15753]))                  
                :type "class")
                nil [12690 15753])
            ("BoundedSemaphore" type
               (:documentation "Implements a bounded semaphore.

    A bounded semaphore checks to make sure its current value doesn't exceed its
    initial value. If it does, ValueError is raised. In most situations
    semaphores are used to guard resources with limited capacity.

    If the semaphore is released too many times it's a sign of a bug. If not
    given, value defaults to 1.

    Like regular semaphores, bounded semaphores manage a counter representing
    the number of release() calls minus the number of acquire() calls, plus an
    initial value. The acquire() method blocks if necessary until it can return
    without making the counter negative. If not given, value defaults to 1.

    "
                :superclasses ("Semaphore")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Semaphore" code nil (reparse-symbol indented_block_body) [16524 16555])
                            ("self" variable nil (reparse-symbol indented_block_body) [16564 16591]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16500 16504])
                            ("value" variable nil (reparse-symbol function_parameters) [16506 16511]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16487 16592])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16609 16613]))                          
                        :documentation "Release a semaphore, incrementing the internal counter by one.

        When the counter is zero on entry and another thread is waiting for it
        to become larger than zero again, wake up that thread.

        If the number of releases exceeds the number of acquires,
        raise a ValueError.

        ")
                        (reparse-symbol indented_block_body) [16597 17148]))                  
                :type "class")
                nil [15755 17148])
            ("Event" type
               (:documentation "Class implementing event objects.

    Events manage a flag that can be set to true with the set() method and reset
    to false with the clear() method. The wait() method blocks until the flag is
    true.  The flag is initially false.

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [17508 17538])
                            ("self" variable nil (reparse-symbol indented_block_body) [17547 17565]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17493 17497]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17480 17566])
                    ("_reset_internal_locks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17597 17601]))                          )
                        (reparse-symbol indented_block_body) [17571 17716])
                    ("is_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17732 17736]))                          
                        :documentation "Return true if and only if the internal flag is true.")
                        (reparse-symbol indented_block_body) [17721 17833])
                    ("isSet" variable nil (reparse-symbol indented_block_body) [17838 17852])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17866 17870]))                          
                        :documentation "Set the internal flag to true.

        All threads waiting for it to become true are awakened. Threads
        that call wait() once the flag is true will not block at all.

        ")
                        (reparse-symbol indented_block_body) [17858 18162])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18177 18181]))                          
                        :documentation "Reset the internal flag to false.

        Subsequently, threads calling wait() will block until set() is called to
        set the internal flag to true again.

        ")
                        (reparse-symbol indented_block_body) [18167 18425])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18439 18443])
                            ("timeout" variable nil (reparse-symbol function_parameters) [18445 18452]))                          
                        :documentation "Block until the internal flag is true.

        If the internal flag is true on entry, return immediately. Otherwise,
        block until another thread calls set() to set the flag to true, or until
        the optional timeout occurs.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof).

        This method returns the internal flag on exit, so it will always return
        True except if a timeout is given and the operation times out.

        ")
                        (reparse-symbol indented_block_body) [18430 19227]))                  
                :type "class")
                nil [17150 19227])
            ("Barrier" type
               (:documentation "Implements a Barrier.

    Useful for synchronizing a fixed number of threads at known synchronization
    points.  Threads block on 'wait()' and are simultaneously awoken once they
    have all made that call.

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a barrier, initialised to 'parties' threads.

        'action' is a callable which, when supplied, will be called by one of
        the threads after they have all entered the barrier and just prior to
        releasing them all. If a 'timeout' is provided, it is used as the
        default for all subsequent 'wait()' calls.

        \"\"\"" code nil (reparse-symbol indented_block_body) [20210 20559])
                            ("self" variable nil (reparse-symbol indented_block_body) [20568 20598])
                            ("self" variable nil (reparse-symbol indented_block_body) [20607 20628])
                            ("self" variable nil (reparse-symbol indented_block_body) [20637 20660])
                            ("self" variable nil (reparse-symbol indented_block_body) [20669 20692])
                            ("self" variable nil (reparse-symbol indented_block_body) [20701 20716])
                            ("self" variable nil (reparse-symbol indented_block_body) [20774 20789]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20159 20163])
                            ("parties" variable nil (reparse-symbol function_parameters) [20165 20172])
                            ("action" variable nil (reparse-symbol function_parameters) [20174 20180])
                            ("timeout" variable nil (reparse-symbol function_parameters) [20187 20194]))                          
                        :documentation "Create a barrier, initialised to 'parties' threads.

        'action' is a callable which, when supplied, will be called by one of
        the threads after they have all entered the barrier and just prior to
        releasing them all. If a 'timeout' is provided, it is used as the
        default for all subsequent 'wait()' calls.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20146 20790])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20804 20808])
                            ("timeout" variable nil (reparse-symbol function_parameters) [20810 20817]))                          
                        :documentation "Wait for the barrier.

        When the specified number of threads have started waiting, they are all
        simultaneously awoken. If an 'action' was provided for the barrier, one
        of the threads will have executed that callback prior to returning.
        Returns an individual index number from 0 to 'parties-1'.

        ")
                        (reparse-symbol indented_block_body) [20795 21827])
                    ("_enter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21935 21939]))                          )
                        (reparse-symbol indented_block_body) [21924 22215])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22321 22325]))                          )
                        (reparse-symbol indented_block_body) [22308 22633])
                    ("_wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22758 22762])
                            ("timeout" variable nil (reparse-symbol function_parameters) [22764 22771]))                          )
                        (reparse-symbol indented_block_body) [22748 23049])
                    ("_exit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23176 23180]))                          )
                        (reparse-symbol indented_block_body) [23166 23362])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23377 23381]))                          
                        :documentation "Reset the barrier to the initial state.

        Any threads currently waiting will get the BrokenBarrier exception
        raised.

        ")
                        (reparse-symbol indented_block_body) [23367 24008])
                    ("abort" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24023 24027]))                          
                        :documentation "Place the barrier into a 'broken' state.

        Useful in case of error.  Any currently waiting threads and threads
        attempting to 'wait()' will have BrokenBarrierError raised.

        ")
                        (reparse-symbol indented_block_body) [24013 24291])
                    ("_break" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24307 24311]))                          )
                        (reparse-symbol indented_block_body) [24296 24483])
                    ("parties" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24514 24518]))                          
                        :documentation "Return the number of threads required to trip the barrier.")
                        (reparse-symbol indented_block_body) [24488 24623])
                    ("n_waiting" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24656 24660]))                          
                        :documentation "Return the number of threads currently waiting at the barrier.")
                        (reparse-symbol indented_block_body) [24628 24965])
                    ("broken" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24995 24999]))                          
                        :documentation "Return True if the barrier is in a broken state.")
                        (reparse-symbol indented_block_body) [24970 25098]))                  
                :type "class")
                nil [19899 25098])
            ("BrokenBarrierError" type
               (:superclasses ("RuntimeError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [25183 25187]))                  
                :type "class")
                nil [25139 25188])
            ("_counter" variable nil nil [25228 25256])
            ("_counter" code nil nil [25257 25267])
            ("_newname" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [25328 25336]))              ) nil [25315 25384])
            ("_active_limbo_lock" variable nil nil [25416 25453])
            ("_active" variable nil nil [25454 25466])
            ("_limbo" variable nil nil [25504 25515])
            ("_dangling" variable nil nil [25516 25537])
            ("_shutdown_locks_lock" variable nil nil [25702 25741])
            ("_shutdown_locks" variable nil nil [25742 25765])
            ("Thread" type
               (:documentation "A class that represents a thread of control.

    This class can be safely subclassed in a limited fashion. There are two ways
    to specify the activity: by passing a callable object to the constructor, or
    by overriding the run() method in a subclass.

    "
                :members 
                  ( ("_initialized" variable nil (reparse-symbol indented_block_body) [26086 26106])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"This constructor should always be called with keyword arguments. Arguments are:

        *group* should be None; reserved for future extension when a ThreadGroup
        class is implemented.

        *target* is the callable object to be invoked by the run()
        method. Defaults to None, meaning nothing is called.

        *name* is the thread name. By default, a unique name is constructed of
        the form \"Thread-N\" where N is a small decimal number.

        *args* is the argument tuple for the target invocation. Defaults to ().

        *kwargs* is a dictionary of keyword arguments for the target
        invocation. Defaults to {}.

        If a subclass overrides the constructor, it must make sure to invoke
        the base class constructor (Thread.__init__()) before doing anything
        else to the thread.

        \"\"\"" code nil (reparse-symbol indented_block_body) [26231 27080])
                            ("assert" code nil (reparse-symbol indented_block_body) [27089 27148])
                            ("if" code nil (reparse-symbol indented_block_body) [27157 27200])
                            ("self" variable nil (reparse-symbol indented_block_body) [27208 27229])
                            ("self" variable nil (reparse-symbol indented_block_body) [27238 27274])
                            ("self" variable nil (reparse-symbol indented_block_body) [27283 27300])
                            ("self" variable nil (reparse-symbol indented_block_body) [27309 27330])
                            ("if" code nil (reparse-symbol indented_block_body) [27339 27465])
                            ("self" variable nil (reparse-symbol indented_block_body) [27473 27491])
                            ("if" code nil (reparse-symbol indented_block_body) [27500 27562])
                            ("self" variable nil (reparse-symbol indented_block_body) [27570 27594])
                            ("self" variable nil (reparse-symbol indented_block_body) [27603 27626])
                            ("self" variable nil (reparse-symbol indented_block_body) [27635 27659])
                            ("self" variable nil (reparse-symbol indented_block_body) [27668 27692])
                            ("self" variable nil (reparse-symbol indented_block_body) [27764 27790])
                            ("self" variable nil (reparse-symbol indented_block_body) [27799 27850])
                            ("_dangling" code nil (reparse-symbol indented_block_body) [27901 27920]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26125 26129])
                            ("group" variable nil (reparse-symbol function_parameters) [26131 26136])
                            ("target" variable nil (reparse-symbol function_parameters) [26143 26149])
                            ("name" variable nil (reparse-symbol function_parameters) [26156 26160])
                            ("args" variable nil (reparse-symbol function_parameters) [26184 26188])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [26193 26199])
                            ("daemon" variable nil (reparse-symbol function_parameters) [26209 26215]))                          
                        :documentation "This constructor should always be called with keyword arguments. Arguments are:

        *group* should be None; reserved for future extension when a ThreadGroup
        class is implemented.

        *target* is the callable object to be invoked by the run()
        method. Defaults to None, meaning nothing is called.

        *name* is the thread name. By default, a unique name is constructed of
        the form \"Thread-N\" where N is a small decimal number.

        *args* is the argument tuple for the target invocation. Defaults to ().

        *kwargs* is a dictionary of keyword arguments for the target
        invocation. Defaults to {}.

        If a subclass overrides the constructor, it must make sure to invoke
        the base class constructor (Thread.__init__()) before doing anything
        else to the thread.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26112 27921])
                    ("_reset_internal_locks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27952 27956])
                            ("is_alive" variable nil (reparse-symbol function_parameters) [27958 27966]))                          )
                        (reparse-symbol indented_block_body) [27926 28405])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28423 28427]))                          )
                        (reparse-symbol indented_block_body) [28410 28943])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28958 28962]))                          
                        :documentation "Start the thread's activity.

        It must be called at most once per thread object. It arranges for the
        object's run() method to be invoked in a separate thread of control.

        This method will raise a RuntimeError if called more than once on the
        same thread object.

        ")
                        (reparse-symbol indented_block_body) [28948 29753])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29766 29770]))                          
                        :documentation "Method representing the thread's activity.

        You may override this method in a subclass. The standard run() method
        invokes the callable object passed to the object's constructor as the
        target argument, if any, with sequential and keyword arguments taken
        from the args and kwargs arguments, respectively.

        ")
                        (reparse-symbol indented_block_body) [29758 30447])
                    ("_bootstrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30467 30471]))                          )
                        (reparse-symbol indented_block_body) [30452 31446])
                    ("_set_ident" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31466 31470]))                          )
                        (reparse-symbol indented_block_body) [31451 31507])
                    ("if" code nil (reparse-symbol indented_block_body) [31512 31619])
                    ("_set_tstate_lock" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31645 31649]))                          
                        :documentation "
        Set a lock object which will be released by the interpreter when
        the underlying thread state (see pystate.h) gets deleted.
        ")
                        (reparse-symbol indented_block_body) [31624 32018])
                    ("_bootstrap_inner" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32044 32048]))                          )
                        (reparse-symbol indented_block_body) [32023 32897])
                    ("_stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32912 32916]))                          )
                        (reparse-symbol indented_block_body) [32902 34209])
                    ("_delete" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34226 34230]))                          )
                        (reparse-symbol indented_block_body) [34214 34379])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34667 34671])
                            ("timeout" variable nil (reparse-symbol function_parameters) [34673 34680]))                          
                        :documentation "Wait until the thread terminates.

        This blocks the calling thread until the thread whose join() method is
        called terminates -- either normally or through an unhandled exception
        or until the optional timeout occurs.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof). As join() always returns None, you must call
        is_alive() after join() to decide whether a timeout happened -- if the
        thread is still alive, the join() call timed out.

        When the timeout argument is not present or None, the operation will
        block until the thread terminates.

        A thread can be join()ed many times.

        join() raises a RuntimeError if an attempt is made to join the current
        thread as that would cause a deadlock. It is also an error to join() a
        thread before it has been started and attempts to do so raises the same
        exception.

        ")
                        (reparse-symbol indented_block_body) [34658 36350])
                    ("_wait_for_tstate_lock" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36381 36385])
                            ("block" variable nil (reparse-symbol function_parameters) [36387 36392])
                            ("timeout" variable nil (reparse-symbol function_parameters) [36399 36406]))                          )
                        (reparse-symbol indented_block_body) [36355 37088])
                    ("name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37116 37120]))                          
                        :documentation "A string used for identification purposes only.

        It has no semantics. Multiple threads may be given the same name. The
        initial name is set by the constructor.

        ")
                        (reparse-symbol indented_block_body) [37093 37413])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37444 37448])
                            ("name" variable nil (reparse-symbol function_parameters) [37450 37454]))                          
                        :decorators 
                          ( ("name.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [37418 37553])
                    ("ident" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37582 37586]))                          
                        :documentation "Thread identifier of this thread or None if it has not been started.

        This is a nonzero integer. See the get_ident() function. Thread
        identifiers may be recycled when a thread exits and another thread is
        created. The identifier is available even after the thread has exited.

        ")
                        (reparse-symbol indented_block_body) [37558 38004])
                    ("if" code nil (reparse-symbol indented_block_body) [38009 38445])
                    ("is_alive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38463 38467]))                          
                        :documentation "Return whether the thread is alive.

        This method returns True just before the run() method starts until just
        after the run() method terminates. The module function enumerate()
        returns a list of all alive threads.

        ")
                        (reparse-symbol indented_block_body) [38450 38958])
                    ("isAlive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38975 38979]))                          
                        :documentation "Return whether the thread is alive.

        This method is deprecated, use is_alive() instead.
        ")
                        (reparse-symbol indented_block_body) [38963 39285])
                    ("daemon" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39315 39319]))                          
                        :documentation "A boolean value indicating whether this thread is a daemon thread.

        This must be set before start() is called, otherwise RuntimeError is
        raised. Its initial value is inherited from the creating thread; the
        main thread is not a daemon thread and therefore all threads created in
        the main thread default to daemon = False.

        The entire Python program exits when only daemon threads are left.

        ")
                        (reparse-symbol indented_block_body) [39290 39870])
                    ("daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39905 39909])
                            ("daemonic" variable nil (reparse-symbol function_parameters) [39911 39919]))                          
                        :decorators 
                          ( ("daemon.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [39875 40164])
                    ("isDaemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40182 40186]))                          )
                        (reparse-symbol indented_block_body) [40169 40216])
                    ("setDaemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40235 40239])
                            ("daemonic" variable nil (reparse-symbol function_parameters) [40241 40249]))                          )
                        (reparse-symbol indented_block_body) [40221 40283])
                    ("getName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40300 40304]))                          )
                        (reparse-symbol indented_block_body) [40288 40332])
                    ("setName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40349 40353])
                            ("name" variable nil (reparse-symbol function_parameters) [40355 40359]))                          )
                        (reparse-symbol indented_block_body) [40337 40387]))                  
                :type "class")
                nil [25793 40387])
            ("try" code nil nil [40389 41876])
            ("_make_invoke_excepthook" function nil nil [41878 43472])
            ("Timer" type
               (:documentation "Call a function after a specified number of seconds:

            t = Timer(30.0, f, args=None, kwargs=None)
            t.start()
            t.cancel()     # stop the timer's action if it's still waiting

    "
                :superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [43855 43876])
                            ("self" variable nil (reparse-symbol indented_block_body) [43885 43909])
                            ("self" variable nil (reparse-symbol indented_block_body) [43918 43942])
                            ("" code nil (reparse-symbol indented_block_body) [43993 43995])
                            ("" code nil (reparse-symbol indented_block_body) [44052 44054])
                            ("self" variable nil (reparse-symbol indented_block_body) [44063 44086]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43796 43800])
                            ("interval" variable nil (reparse-symbol function_parameters) [43802 43810])
                            ("function" variable nil (reparse-symbol function_parameters) [43812 43820])
                            ("args" variable nil (reparse-symbol function_parameters) [43822 43826])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [43833 43839]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43783 44087])
                    ("cancel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44103 44107]))                          
                        :documentation "Stop the timer if it hasn't finished yet.")
                        (reparse-symbol indented_block_body) [44092 44194])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44207 44211]))                          )
                        (reparse-symbol indented_block_body) [44199 44376]))                  
                :type "class")
                nil [43535 44376])
            ("_MainThread" type
               (:superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [44491 44545])
                            ("self" code nil (reparse-symbol indented_block_body) [44554 44577])
                            ("self" code nil (reparse-symbol indented_block_body) [44586 44605])
                            ("self" code nil (reparse-symbol indented_block_body) [44614 44631])
                            ("if" code nil (reparse-symbol indented_block_body) [44640 44701])
                            ("with" code nil (reparse-symbol indented_block_body) [44709 44774]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44476 44480]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44463 44774]))                  
                :type "class")
                nil [44431 44774])
            ("_DummyThread" type
               (:superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [45273 45334])
                            ("self" code nil (reparse-symbol indented_block_body) [45344 45363])
                            ("self" code nil (reparse-symbol indented_block_body) [45372 45389])
                            ("if" code nil (reparse-symbol indented_block_body) [45398 45459])
                            ("with" code nil (reparse-symbol indented_block_body) [45467 45532]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45258 45262]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [45245 45532])
                    ("_stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45547 45551]))                          )
                        (reparse-symbol indented_block_body) [45537 45567])
                    ("is_alive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45585 45589]))                          )
                        (reparse-symbol indented_block_body) [45572 45675])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45689 45693])
                            ("timeout" variable nil (reparse-symbol function_parameters) [45695 45702]))                          )
                        (reparse-symbol indented_block_body) [45680 45761]))                  
                :type "class")
                nil [45212 45761])
            ("current_thread" function (:documentation "Return the current Thread object, corresponding to the caller's thread of control.

    If the caller's thread of control was not created through the threading
    module, a dummy thread object with limited functionality is returned.

    ") nil [45787 46155])
            ("currentThread" variable nil nil [46156 46186])
            ("active_count" function (:documentation "Return the number of Thread objects currently alive.

    The returned count is equal to the length of the list returned by
    enumerate().

    ") nil [46188 46436])
            ("activeCount" variable nil nil [46437 46463])
            ("_enumerate" function nil nil [46465 46609])
            ("enumerate" function (:documentation "Return a list of all Thread objects currently alive.

    The list includes daemonic threads, dummy thread objects created by
    current_thread(), and the main thread. It excludes terminated threads and
    threads that have not yet been started.

    ") nil [46610 46982])
            ("_thread" include nil nil [46983 47013])
            ("_main_thread" variable nil nil [47129 47157])
            ("_shutdown" function (:documentation "
    Wait until the Python thread state of all non-daemon threads get deleted.
    ") nil [47159 48318])
            ("main_thread" function (:documentation "Return the main thread object.

    In normal conditions, the main thread is the thread from which the
    Python interpreter was started.
    ") nil [48424 48621])
            ("try" code nil nil [48719 48823])
            ("_after_fork" function (:documentation "
    Cleanup threading module state that should not exist after a fork.
    ") nil [48825 50494])
            ("if" code nil nil [50496 50586]))          
      :file "threading.py"
      :pointmax 50586
      :fsize 50585
      :lastmodtime '(24336 23930 0 0)
      :unmatched-syntax '((NAME 44004 . 44008) (IF 44025 . 44027) (ELSE 44047 . 44051) (NAME 43951 . 43955) (IF 43968 . 43970) (ELSE 43988 . 43992) (INDENT_BLOCK 43418 . 43442) (NEWLINE 43348 . 43349) (COLON 43347 . 43348) (FINALLY 43340 . 43347) (INDENT_BLOCK 42739 . 43332) (NEWLINE 42738 . 42739) (COLON 42737 . 42738) (TRY 42518 . 42521) (AS 42731 . 42733) (DIV 40911 . 40912) (MULT 26206 . 26207) (COMMA 26207 . 26208)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Heap queue algorithm (a.k.a. priority queue).

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

Usage:

heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged

Our API differs from textbook heap algorithms as follows:

- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.

- Our heappop() method returns the smallest item, not the largest.

These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!
\"\"\"" code nil nil [1 1270])
            ("__about__" variable nil nil [1354 6090])
            ("__all__" variable nil nil [6092 6211])
            ("heappush" function
               (:documentation "Push item onto heap, maintaining the heap invariant."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [6226 6230])
                    ("item" variable nil (reparse-symbol function_parameters) [6232 6236]))                  )
                nil [6213 6360])
            ("heappop" function
               (:documentation "Pop the smallest item off the heap, maintaining the heap invariant."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [6373 6377]))                  )
                nil [6361 6673])
            ("heapreplace" function
               (:documentation "Pop and return the current smallest value, and add the new item.

    This is more efficient than heappop() followed by heappush(), and can be
    more appropriate when using a fixed-size heap.  Note that the value
    returned may be larger than item!  That constrains reasonable uses of
    this routine unless written as part of a conditional replacement:

        if item > heap[0]:
            item = heapreplace(heap, item)
    "
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [6690 6694])
                    ("item" variable nil (reparse-symbol function_parameters) [6696 6700]))                  )
                nil [6674 7287])
            ("heappushpop" function
               (:documentation "Fast version of a heappush followed by a heappop."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [7304 7308])
                    ("item" variable nil (reparse-symbol function_parameters) [7310 7314]))                  )
                nil [7288 7488])
            ("heapify" function
               (:documentation "Transform list into a heap, in-place, in O(len(x)) time."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7501 7502]))                  )
                nil [7489 8016])
            ("_heappop_max" function
               (:documentation "Maxheap version of a heappop."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [8034 8038]))                  )
                nil [8017 8300])
            ("_heapreplace_max" function
               (:documentation "Maxheap version of a heappop followed by a heappush."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [8322 8326])
                    ("item" variable nil (reparse-symbol function_parameters) [8328 8332]))                  )
                nil [8301 8541])
            ("_heapify_max" function
               (:documentation "Transform list into a maxheap, in-place, in O(len(x)) time."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [8559 8560]))                  )
                nil [8542 8710])
            ("_siftdown" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [8894 8898])
                ("startpos" variable nil (reparse-symbol function_parameters) [8900 8908])
                ("pos" variable nil (reparse-symbol function_parameters) [8910 8913]))              ) nil [8880 9737])
            ("_siftup" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [11356 11360])
                ("pos" variable nil (reparse-symbol function_parameters) [11362 11365]))              ) nil [11344 12077])
            ("_siftdown_max" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [12096 12100])
                ("startpos" variable nil (reparse-symbol function_parameters) [12102 12110])
                ("pos" variable nil (reparse-symbol function_parameters) [12112 12115]))              ) nil [12078 12515])
            ("_siftup_max" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [12532 12536])
                ("pos" variable nil (reparse-symbol function_parameters) [12538 12541]))              ) nil [12516 13287])
            ("merge" function (:arguments 
              ( ("iterables" variable nil (reparse-symbol function_parameters) [13298 13308])
                ("key" variable nil (reparse-symbol function_parameters) [13310 13313])
                ("reverse" variable nil (reparse-symbol function_parameters) [13320 13327]))              ) nil [13288 15818])
            ("nsmallest" function
               (:documentation "Find the n smallest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [18974 18975])
                    ("iterable" variable nil (reparse-symbol function_parameters) [18977 18985])
                    ("key" variable nil (reparse-symbol function_parameters) [18987 18990]))                  )
                nil [18960 20737])
            ("nlargest" function
               (:documentation "Find the n largest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [20751 20752])
                    ("iterable" variable nil (reparse-symbol function_parameters) [20754 20762])
                    ("key" variable nil (reparse-symbol function_parameters) [20764 20767]))                  )
                nil [20738 22450])
            ("try" code nil nil [22488 22547])
            ("try" code nil nil [22547 22621])
            ("try" code nil nil [22621 22691])
            ("try" code nil nil [22691 22761])
            ("if" code nil nil [22763 22877]))          
      :file "heapq.py"
      :pointmax 22877
      :fsize 22877
      :lastmodtime '(24336 23930 0 0)
      :unmatched-syntax '((RETURN 21070 . 21076) (IF 21080 . 21082) (ELSE 21102 . 21106) (RETURN 19280 . 19286) (IF 19290 . 19292) (ELSE 19312 . 19316) (YIELD 15793 . 15798) (FROM 15799 . 15803) (NEWLINE 15817 . 15818) (YIELD 15087 . 15092) (FROM 15093 . 15097) (NEWLINE 15111 . 15112)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("_weakref" include nil nil [145 169])
            ("__all__" variable nil nil [171 192])
            ("_IterationGuard" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [535 574]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [475 479])
                            ("weakcontainer" variable nil (reparse-symbol function_parameters) [481 494]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [462 575])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [594 598]))                          )
                        (reparse-symbol indented_block_body) [580 715])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [733 737])
                            ("e" variable nil (reparse-symbol function_parameters) [739 740])
                            ("t" variable nil (reparse-symbol function_parameters) [742 743])
                            ("b" variable nil (reparse-symbol function_parameters) [745 746]))                          )
                        (reparse-symbol indented_block_body) [720 923]))                  
                :type "class")
                nil [195 923])
            ("WeakSet" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [983 1000])
                            ("_remove" function (:arguments 
                              ( ("item" variable nil (reparse-symbol function_parameters) [1021 1025])
                                ("selfref" variable nil (reparse-symbol function_parameters) [1027 1034]))                              ) (reparse-symbol indented_block_body) [1009 1267])
                            ("self" variable nil (reparse-symbol indented_block_body) [1275 1297])
                            ("self" variable nil (reparse-symbol indented_block_body) [1345 1372])
                            ("self" variable nil (reparse-symbol indented_block_body) [1381 1404])
                            ("if" code nil (reparse-symbol indented_block_body) [1413 1464]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [957 961])
                            ("data" variable nil (reparse-symbol function_parameters) [963 967]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [944 1464])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1490 1494]))                          )
                        (reparse-symbol indented_block_body) [1469 1614])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1632 1636]))                          )
                        (reparse-symbol indented_block_body) [1619 1949])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1966 1970]))                          )
                        (reparse-symbol indented_block_body) [1954 2033])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2055 2059])
                            ("item" variable nil (reparse-symbol function_parameters) [2061 2065]))                          )
                        (reparse-symbol indented_block_body) [2038 2190])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2210 2214]))                          )
                        (reparse-symbol indented_block_body) [2195 2313])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2326 2330])
                            ("item" variable nil (reparse-symbol function_parameters) [2332 2336]))                          )
                        (reparse-symbol indented_block_body) [2318 2457])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2472 2476]))                          )
                        (reparse-symbol indented_block_body) [2462 2576])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2590 2594]))                          )
                        (reparse-symbol indented_block_body) [2581 2633])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2646 2650]))                          )
                        (reparse-symbol indented_block_body) [2638 2989])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3005 3009])
                            ("item" variable nil (reparse-symbol function_parameters) [3011 3015]))                          )
                        (reparse-symbol indented_block_body) [2994 3125])
                    ("discard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3142 3146])
                            ("item" variable nil (reparse-symbol function_parameters) [3148 3152]))                          )
                        (reparse-symbol indented_block_body) [3130 3263])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3279 3283])
                            ("other" variable nil (reparse-symbol function_parameters) [3285 3290]))                          )
                        (reparse-symbol indented_block_body) [3268 3424])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3441 3445])
                            ("other" variable nil (reparse-symbol function_parameters) [3447 3452]))                          )
                        (reparse-symbol indented_block_body) [3429 3502])
                    ("difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3522 3526])
                            ("other" variable nil (reparse-symbol function_parameters) [3528 3533]))                          )
                        (reparse-symbol indented_block_body) [3507 3627])
                    ("__sub__" variable nil (reparse-symbol indented_block_body) [3631 3651])
                    ("difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3679 3683])
                            ("other" variable nil (reparse-symbol function_parameters) [3685 3690]))                          )
                        (reparse-symbol indented_block_body) [3657 3722])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3739 3743])
                            ("other" variable nil (reparse-symbol function_parameters) [3745 3750]))                          )
                        (reparse-symbol indented_block_body) [3726 3983])
                    ("intersection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4005 4009])
                            ("other" variable nil (reparse-symbol function_parameters) [4011 4016]))                          )
                        (reparse-symbol indented_block_body) [3988 4089])
                    ("__and__" variable nil (reparse-symbol indented_block_body) [4093 4115])
                    ("intersection_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4145 4149])
                            ("other" variable nil (reparse-symbol function_parameters) [4151 4156]))                          )
                        (reparse-symbol indented_block_body) [4121 4188])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4205 4209])
                            ("other" variable nil (reparse-symbol function_parameters) [4211 4216]))                          )
                        (reparse-symbol indented_block_body) [4192 4377])
                    ("issubset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4395 4399])
                            ("other" variable nil (reparse-symbol function_parameters) [4401 4406]))                          )
                        (reparse-symbol indented_block_body) [4382 4472])
                    ("__le__" variable nil (reparse-symbol indented_block_body) [4476 4493])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4510 4514])
                            ("other" variable nil (reparse-symbol function_parameters) [4516 4521]))                          )
                        (reparse-symbol indented_block_body) [4499 4572])
                    ("issuperset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4592 4596])
                            ("other" variable nil (reparse-symbol function_parameters) [4598 4603]))                          )
                        (reparse-symbol indented_block_body) [4577 4671])
                    ("__ge__" variable nil (reparse-symbol indented_block_body) [4675 4694])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4711 4715])
                            ("other" variable nil (reparse-symbol function_parameters) [4717 4722]))                          )
                        (reparse-symbol indented_block_body) [4700 4773])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4789 4793])
                            ("other" variable nil (reparse-symbol function_parameters) [4795 4800]))                          )
                        (reparse-symbol indented_block_body) [4778 4936])
                    ("symmetric_difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4966 4970])
                            ("other" variable nil (reparse-symbol function_parameters) [4972 4977]))                          )
                        (reparse-symbol indented_block_body) [4941 5081])
                    ("__xor__" variable nil (reparse-symbol indented_block_body) [5085 5115])
                    ("symmetric_difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5153 5157])
                            ("other" variable nil (reparse-symbol function_parameters) [5159 5164]))                          )
                        (reparse-symbol indented_block_body) [5121 5196])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5213 5217])
                            ("other" variable nil (reparse-symbol function_parameters) [5219 5224]))                          )
                        (reparse-symbol indented_block_body) [5200 5481])
                    ("union" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5496 5500])
                            ("other" variable nil (reparse-symbol function_parameters) [5502 5507]))                          )
                        (reparse-symbol indented_block_body) [5486 5577])
                    ("__or__" variable nil (reparse-symbol indented_block_body) [5581 5595])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5616 5620])
                            ("other" variable nil (reparse-symbol function_parameters) [5622 5627]))                          )
                        (reparse-symbol indented_block_body) [5601 5680])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5698 5702]))                          )
                        (reparse-symbol indented_block_body) [5685 5736]))                  
                :type "class")
                nil [925 5736]))          
      :file "_weakrefset.py"
      :pointmax 5736
      :fsize 5735
      :lastmodtime '(24336 23930 0 0)
      :unmatched-syntax '((RAISE 2848 . 2853) (FROM 2889 . 2893) (NEWLINE 2898 . 2899))))
  :file "!usr!lib!python3.8!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
